sw.fut2 <- sw.fut[ , sgTraits]
g.sw.fut2 <- g.sw.fut[ , g.sgTraits]
# calculate relative fitness
sw.fut2$rel.fit <- sw.fut2$TotFruits / max(sw.fut2$TotFruits, na.rm = TRUE)
g.sw.fut2$rel.fit <- g.sw.fut2$TotFruits / max(g.sw.fut2$TotFruits, na.rm = TRUE)
# center and standardize
sw.fut2 <- sw.fut2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
g.sw.fut2 <- g.sw.fut2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
# phenotypic
sg.it.cur <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = it.cur2)
summary(sg.it.cur)
vif(sg.it.cur)
# genotypic
g.sg.it.cur <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.it.cur2)
summary(g.sg.it.cur)
vif(g.sg.it.cur)
#phenotypic
sg.sw.cur <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2)
summary(sg.sw.cur)
vif(sg.sw.cur)
#genotypic
g.sg.sw.cur <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)
summary(g.sg.sw.cur)
vif(g.sg.sw.cur)
#phenotypic
sg.it.fut <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = it.fut2)
summary(sg.it.fut)
vif(sg.it.fut)
#genotypic
g.sg.it.fut <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.it.fut2)
summary(g.sg.it.fut)
vif(g.sg.it.fut)
#phenotypic
sg.sw.fut <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2)
summary(sg.sw.fut)
vif(sg.sw.fut)
# quick check order of terms is not important
summary(lmer(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + EmergeToFlwr + SLA + Repro_Ros + (1|GS), data = sw.fut2))
#genotypic
g.sg.sw.fut <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)
summary(g.sg.sw.fut)
vif(g.sg.sw.fut)
# quick check order of terms is not important
summary(lm(rel.fit ~ bolt_LN_ros + RWC + SLA + EmergeToFlwr + LN_prevern + Repro_Ros, data = g.sw.fut2))
# genotypic full model: lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)
# I don't need to save the intermediate models, just the residuals. I am going to name these as no_trait where trait is the predictor that I removed from the model
# genotypic: with current sorting all the NA's are for 951 which is the last row so add this as a row to the data frame
g.sw.fut2$no_EmergeToFlwr <- c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_LN_prevern <- c(resid(lm(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_bolt_LN_ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_RWC <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_SLA <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_Repro_Ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA, data = g.sw.fut2)), NA)
# phenotypic full model:lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2)
# only keep complete cases to remove NA
sw.fut2 <- sw.fut2[complete.cases(sw.fut2), ]
sw.fut2$no_EmergeToFlwr <- resid(lmer(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_LN_prevern <- resid(lmer(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_bolt_LN_ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_RWC <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_SLA <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_Repro_Ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + (1|GS), data = sw.fut2))
# Emergence to Flowering
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# Leaf Number Pre-vernalization
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# Leaf Number at Bolting
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# relative water content
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# specific leaf area
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# ratio of reproductive biomass to rosette biomass
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# genotypic full model: lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)
# I don't need to save the intermediate models, just the residuals. I am going to name these as no_trait where trait is the predictor that I removed from the model
# with current sorting all the NA's are for 951 which is the last row so add this as a row to the data frame
g.sw.cur2$no_EmergeToFlwr <- c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_LN_prevern <- c(resid(lm(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_bolt_LN_ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_RWC <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_SLA <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_Repro_Ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA, data = g.sw.cur2)), NA)
# phenotypic full model:lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2)
# only keep complete cases to remove NA
sw.cur2 <- sw.cur2[complete.cases(sw.cur2), ]
sw.cur2$no_EmergeToFlwr <- resid(lmer(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_LN_prevern <- resid(lmer(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_bolt_LN_ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_RWC <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_SLA <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_Repro_Ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + (1|GS), data = sw.cur2))
#Emergence to Flowering
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# LN prevern
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
#LN bolting
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# RWC
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# SLA
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# Repro: Ros
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
summary(sg.sw.fut)
summary(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2))
# remove EmergeToFlwr
summary(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2))
View(g.sg.sw.fut)
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)) ~ EmergeToFlwr, data = g.sw.fut2)
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)) ~ EmergeToFlwr, data = g.sw.fut2))
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ EmergeToFlwr, data = g.sw.fut2))
# now try Jimmy's thing of taking residuals in the predictor too
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA), data = g.sw.fut2))
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA), data = g.sw.fut2))
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ EmergeToFlwr, data = g.sw.fut2))
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ EmergeToFlwr, data = g.sw.fut2))
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
# now try Jimmy's thing of taking residuals in the predictor too
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA), data = g.sw.fut2))
g.sw.fut2$EmergeToFlwr_JimmyResid <- c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = EmergeToFlwr_JimmyResid, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr_JimmyResid, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
load("~/R_script/PopGlobalPi_allsite_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_04082022.ROBJ")
# adding this on later date. what about quadratic elevation predicting pi?
comp$Elev_c2 <- (comp$Elev_m - mean(comp$Elev_m))^2
m.pi.elev2 <- lm(Mean.pi ~ Elev_m + Elev_c2, data = comp)
### r = -0.2323357 p = 0.3865
m.pi.ssn <- lm(Seq_PopFlwrMean ~ Mean.pi, dat = comp)
########## more complex model! ##########
### with cent ###
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
# need to do a sequenced lines by elevation model to get the residuals from it.
tmp4_seq <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2, data = comp)
comp$Elev_residuals <- residuals(tmp4_seq) # index order matches row name order.
plot(resid(lm(Mean.pi ~ Elev_m + Elev_c2, data = comp)), comp$Elev_residuals)
# add Jimmy's thing in a quick plot
plot(y=comp$Pi_residuals, x = resid(lm(Elev_m ~ Mean.pi, data = comp)))
View(comp)
# then I want the inverse. so the residuals of ssn ~ mean.pi regressed with elevation
# making new model b/c need order to match comp row order and I think it will but why not just do it again
tmp.resid2 <- residuals(lm(Seq_PopFlwrMean ~ Mean.pi, data = comp))
tmp.resid2
plot(tmp.resid2)
# look pretty random
comp$Pi_residuals <- tmp.resid2
# add Jimmy's thing in a quick plot
plot(y=comp$Pi_residuals, x = resid(lm(Elev_m ~ Mean.pi, data = comp)))
library(dplyr)
library(ggplot2)
library(ggpubr)
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_04082022.ROBJ")
###### Correlation/regressions between Variables ######
### Pi and Elevation ###
plot(Mean.pi ~ Elev_m, data = comp)
cor.test(comp$Mean.pi, comp$Elev_m, method = "pearson")
### strong correlation. r = -0.801 p = 0.0001942
m.pi.elev <- lm(Mean.pi ~ Elev_m, data = comp)
summary(m.pi.elev)
# adding this on later date. what about quadratic elevation predicting pi?
comp$Elev_c2 <- (comp$Elev_m - mean(comp$Elev_m))^2
m.pi.elev2 <- lm(Mean.pi ~ Elev_m + Elev_c2, data = comp)
summary(m.pi.elev2)
### SSN and Elevation ###
## Do this with the Full means because we want the best picture of each popualtion
plot(Full_PopFlwrMean ~ Elev_m, data = comp)
cor.test(comp$Full_PopFlwrMean, comp$Elev_m, method = "pearson")
### quadratic regression and look at both the linear and quadratic components of the model (coefficients)
### for quadratic regression
comp$Elev_m2 <- (comp$Elev_m)^2
m.ssn.elev <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp)
summary(m.ssn.elev)
#tmp <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp)
#summary(tmp)
#
#tmp2 <- lm(Full_PopFlwrMean ~ Elev_m2 + Elev_m, data = comp)
#summary(tmp2)
#
#m.ssn.elev_3 <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp, contrasts=list(Elev_m=contr.sum, Elev_m2=contr.sum))
#anova(m.ssn.elev) # this would be the default so it would be type I
#library(car)
#Anova(m.ssn.elev, type = 3)
comp$Elev_c2 <- (comp$Elev_m - mean(comp$Elev_m))^2
tmp4 <- lm(Full_PopFlwrMean ~ Elev_m + Elev_c2, data = comp)
summary(tmp4)
# see what output poly() gives me
# hmm. well this looks totally different in terms of estimates and the linear term p values
# the quadratic and full model p values have not changed; neither have the r squareds
# if I set raw = TRUE, then everything matches my original model (squared term not centered)
tmp5 <- lm(Full_PopFlwrMean ~ poly(Elev_m, 2, raw = TRUE), data = comp)
summary(tmp5)
# if I think about the decreasing colinearity argument, how correlated are my two terms? I would expect highly correlated...
cor(comp$Elev_m, comp$Elev_m2, method = "pearson")
# 0.9752654
cor(comp$Elev_m, comp$Elev_c2, method = "pearson")
# try just a linear fit to see if it matches Jeff's model
m.ssn.elev.linear <- lm(Full_PopFlwrMean ~ Elev_m, data = comp)
summary(m.ssn.elev.linear)
### Pi and SSN ###
## here only use the sequenced lines because that is what pi was calculated from
plot(Seq_PopFlwrMean ~ Mean.pi, data = comp)
cor.test(comp$Mean.pi, comp$
Seq_PopFlwrMean, method = "pearson")
### r = -0.2323357 p = 0.3865
m.pi.ssn <- lm(Seq_PopFlwrMean ~ Mean.pi, dat = comp)
summary(m.pi.ssn)
# adding Jimmy's question of if quadratic nucleotide diveristy would get a better model
comp$pi_c2 <- (comp$Mean.pi - mean(comp$Mean.pi))^2
m.pi.ssn2 <- lm(Seq_PopFlwrMean ~ Mean.pi + pi_c2, dat = comp)
summary(m.pi.ssn2)
### The two means ###
cor.test(comp$Full_PopFlwrMean, comp$Seq_PopFlwrMean, method = "pearson")
###### simulate data to draw lines on the plots where elevation is the predictor ######
new_elev <- seq(55,1750, length = 2000)
center_val <- mean(comp$Elev_m)
newdata <- data.frame(Elev_m = new_elev, Elev_m2 = (new_elev**2), Elev_c2 = ((new_elev - center_val)**2))
newdata2 <- data.frame(Mean.pi = seq(0.001,.0051, length = 2000))
### Now use predict to get the predictions
### can't use se.fit = T for mixed effects model?
m.ssn.elev.pred = predict(tmp4, newdata = newdata, se.fit = TRUE)
m.pi.elev.pred = predict(m.pi.elev, newdata = newdata, se.fit = TRUE)
m.pi.ssn.pred = predict(m.pi.ssn, newdata = newdata2, se.fit = TRUE)
forplot2 <- data.frame('newd1' = newdata$Elev_m,
'newd3' = newdata2,
'pred.ssn.el' = m.ssn.elev.pred,
'pred.pi.el' = m.pi.elev.pred,
'pred.pi.ssn' = m.pi.ssn.pred)
###### fancy plot. ######
### pi by elevation
comp <- comp[order(comp$Elev_m),]
comp$pop <- as.factor(comp$pop)
comp$pop <- factor(comp$pop, levels = comp$pop[order(comp$Elev_m)])
str(comp$pop)
### this looks like the right order
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
comp$labels <- paste0(comp$pop, " - ", comp$Elev_m, "m")
# with terrain, I can get as many colors as I want I think bc it is a function
# for PC where I didn't want it filled in before because there is overlap, maybe I should just change alpha?
barplot(rep(1,6), col = terrain.colors(6))
barplot(rep(1,10), col = terrain.colors(10))
barplot(rep(1,16), col = terrain.colors(16))
# for topo color scheme
barplot(rep(1,6), col = topo.colors(6))
barplot(rep(1,10), col = topo.colors(10))
barplot(rep(1,16), col = topo.colors(16))
# choosing topo as the color scheme, so commenting out all the terrain plots.
# with a linear fit line of elevation explaining mean pi
fig2b <- ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Mean.pi, shape = as.factor(pop), fill= Elev_m), col = "black", size = 3, stroke = 1, show.legend = FALSE)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit), linetype = "solid",
alpha = 0.9, linewidth = 1.)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit+1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.65)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit-1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.65)+
annotate(geom = "text", x = -Inf, y = -Inf, label = "~beta==-1.81e10^-6 *';' ~italic(p)~ bold(' < 0.001')", parse = TRUE,
hjust = -.01, vjust = -1.5, size = 3, fontface = "bold")+
annotate(geom = "text", x = -Inf, y = -Inf, label = "~italic(r)^2 == '0.64'", parse = TRUE,
hjust = -.01, vjust = -0.5, size = 3)+
labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title = element_text(color = "black", size = 10),
axis.text = element_text(color = "black", size = 10),
legend.spacing.y = unit(0.03, "cm"))
fig2b <- annotate_figure(fig2b,
fig.lab = "B", fig.lab.face = "bold")
# with a linear fit line of elevation explaining mean pi
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Mean.pi, shape = as.factor(pop), col= as.factor(pop)), size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit+1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit-1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_color_manual(name = "Population",
labels = comp$label,
values = c(rep(c("red", "orange", "green", "blue"), times = c(4,4,4,4))))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(0, 1, 2, 5), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 16),
legend.text = element_text(color = "black", size = 16),
axis.title = element_text(color = "black", size = 16),
axis.text = element_text(color = "black", size = 16),
legend.spacing.y = unit(0.03, "cm"))
### ssn by elevation
fig2a <- ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Full_PopFlwrMean, shape = as.factor(pop), fill = Elev_m), col = "black", size = 3, stroke = 1, show.legend = FALSE)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit), linetype = "solid",
alpha = 0.9, linewidth = 1)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit+1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.65)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit-1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.65)+
annotate(geom = "text", x = -Inf, y = -Inf, label = "~beta==4.82e10^-4 *';' ~italic(p)~ bold(' = 0.004')", parse = TRUE,
hjust = -0.6, vjust = -2.5, size = 3, fontface = "bold")+
annotate(geom = "text", x = -Inf, y = -Inf, label = "gamma==-4.73e10^-7 *';' ~italic(p)~ ' = 0.137'", parse = TRUE,
hjust = -0.6, vjust = -1.3, size = 3)+
annotate(geom = "text", x = -Inf, y = -Inf, label = "italic(r)^2 == '0.48'", parse = TRUE,
hjust = -1.95, vjust = -0.5, size = 3)+
labs(x= "Elevation (m)", y= "Mean Short Stamen Number", title = "")+ # - Full Phenotype Set
scale_fill_gradientn(name = "Elevation", colours = topo.colors(10))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"),
axis.title = element_text(color = "black", size = 10),
axis.text = element_text(color = "black", size = 10))
# old plot
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Full_PopFlwrMean, shape = as.factor(pop), col= as.factor(pop)), size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit), linetype = "solid",
alpha = 0.7, size = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit+1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.3, size = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit-1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.5, size = 0.75)+
labs(x= "Elevation (m)", y= "Mean Short Stamen Number - Full Phenotype Set", title = "")+
scale_color_manual(name = "Population",
labels = comp$label,
values = c(rep(c("red", "orange", "green", "blue"), times = c(4,4,4,4)), "black"))+ # black not needed unless all is included
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(0, 1, 2, 5), times = 4), 0))+ # extra 0 not needed unless all is included
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 16),
legend.text = element_text(color = "black", size = 16),
legend.spacing.y = unit(0.03, "cm"),
axis.title = element_text(color = "black", size = 16),
axis.text = element_text(color = "black", size = 16))
pops <- c("ALE","ARU","BAR","BIS","BOS","COC","HOR","MUR","PAL","PAN","PIN","POB","RAB","SAL",
"VDM","VIE")
########## more complex model! ##########
### with cent ###
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
View(comp)
## reviewer comment: is the pattern driven by outliers in fig 2D? (which is made below, but addressing with a model here)
# the two outlier populations are BOS and SAL
comp_sub <- comp[!(comp$pop %in% c("BOS", "SAL"), ]
## reviewer comment: is the pattern driven by outliers in fig 2D? (which is made below, but addressing with a model here)
# the two outlier populations are BOS and SAL
comp_sub <- comp[!(comp$pop %in% c("BOS", "SAL")), ]
View(comp_sub)
summary(m.ssn.elev.pi.good)
# run model and look at output
summary(lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp_sub))
4.094e+01
