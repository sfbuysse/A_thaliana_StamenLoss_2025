ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/supp/SSNbyPi_NoCent_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_04082022.ROBJ")
### quadratic regression and look at both the linear and quadratic components of the model (coefficients)
### for quadratic regression
comp$Elev_m2 <- (comp$Elev_m)^2
#tmp <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp)
#summary(tmp)
#
#tmp2 <- lm(Full_PopFlwrMean ~ Elev_m2 + Elev_m, data = comp)
#summary(tmp2)
#
#m.ssn.elev_3 <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp, contrasts=list(Elev_m=contr.sum, Elev_m2=contr.sum))
#anova(m.ssn.elev) # this would be the default so it would be type I
#library(car)
#Anova(m.ssn.elev, type = 3)
comp$Elev_c2 <- (comp$Elev_m - mean(comp$Elev_m))^2
new_elev <- seq(55,1750, length = 2000)
center_val <- mean(comp$Elev_m)
newdata <- data.frame(Elev_m = new_elev, Elev_m2 = (new_elev**2), Elev_c2 = ((new_elev - center_val)**2))
newdata2 <- data.frame(Mean.pi = seq(0.001,.0051, length = 2000))
###### more complex model! ######
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrmean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
###### more complex model! ######
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
summary(m.ssn.elev.pi.good)
# quick check that standardizing doesn't change p values:
tmp.standard2 <- lm(Seq_PopFlwrMean ~ scale(Elev_m) + scale(Elev_c2) + scale(Mean.pi), dat = comp)
summary(tmp.standard2)
# need to do a sequenced lines by elevation model to get the residuals from it.
tmp4_seq <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2, data = comp)
plot(residuals(tmp4_seq))
# decentlyrandom when not coloring by anything
summary(tmp4_seq)
# now need to use the residuals in a plot
comp$Elev_residuals <- residuals(tmp4_seq) # index order matches row name order.
plot(comp$Elev_residuals, comp$Elev_m)
# now need to use the residuals in a plot - quick plot to start
plot(comp$Mean.pi, comp$Elev_residuals)
min(comp$Elev_residuals)
max(comp$Elev_residuals)
# there is maybe a positive relationship here?
# residuals range from -0.6 to 0.3
m.resid.pi2 <- lm(Elev_residuals ~ Mean.pi, dat = comp)
summary(m.resid.pi2)
lm(Seq_PopFlwrMean ~ Mean.pi, data = comp)
# then I want the inverse. so the residuals of ssn ~ mean.pi regressed with elevation
# making new model b/c need order to match comp row order and I think it will but why not just do it again
tmp.resid2 <- residuals(lm(Seq_PopFlwrMean ~ Mean.pi, data = comp))
tmp.resid
tmp.resid2
plot(tmp.resid2)
# look pretty random
comp$Pi_residuals <- tmp.resid2
plot(comp$Elev_m, comp$Pi_residuals)
# not great, but doesn't include the quadratic term. Here I kinda see two curves
m.resid.elev2 <- lm(Pi_residuals ~ Elev_m + Elev_c2, dat = comp)
summary(m.resid.elev2)
min(comp$Elev_residuals)
max(comp$Elev_residuals)
min(comp$Pi_residuals)
max(comp$Pi_residuals)
### Now use predict to get the predictions
newdata5 <- cbind(newdata, newdata2, Elev_residuals = seq(-0.7,0.4, length = 2000), Pi_residuals = seq(-0.8, 0.5, length = 2000) )
#m.ssn.elev.pi.pred = predict(m.ssn.elev.pi, newdata = newdata5, se.fit = TRUE)
m.resid.pi2.pred = predict(m.resid.pi2, newdata = newdata5, se.fit = TRUE)
m.resid.elev2.pred = predict(m.resid.elev2, newdata = newdata5, se.fit = TRUE)
forplot5 <- data.frame('Elev_m' = newdata$Elev_m,
'Elev_m2' = newdata$Elev_m2,
'newd2' = newdata2,
'newd_res_elev' = newdata5$Elev_residuals,
'pred.m.resid.pi' = m.resid.pi2.pred,
'newd_res_pi' = newdata5$Pi_residuals,
'pred.m.resid.elev' = m.resid.elev2.pred)
## and plot
ggplot(comp)+
geom_point(data=comp, aes(x=Mean.pi, y=Elev_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit+1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit-1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Nucleotide Diversity", y= "Elevation Residuals", title = "long y title is Residuals of Seq_SSN ~ Elevation + centered(Elevation)^2")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 19.5),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNElevQuadResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
# pi residuals
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Pi_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit+1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit-1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(y= "Nucleotide Diversity Residuals", x= "Elevation (m)", title = "long y title is Residuals of Seq_SSN ~ Mean.pi")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNPiResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
## and plot
comp <- comp[order(comp$Elev_m),]
comp$pop <- as.factor(comp$pop)
comp$pop <- factor(comp$pop, levels = comp$pop[order(comp$Elev_m)])
str(comp$pop)
### this looks like the right order
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
comp$labels <- paste0(comp$pop, " - ", comp$Elev_m, "m")
ggplot(comp)+
geom_point(data=comp, aes(x=Mean.pi, y=Elev_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit+1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit-1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Nucleotide Diversity", y= "Elevation Residuals", title = "long y title is Residuals of Seq_SSN ~ Elevation + centered(Elevation)^2")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 19.5),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNElevQuadResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
# pi residuals
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Pi_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit+1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit-1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(y= "Nucleotide Diversity Residuals", x= "Elevation (m)", title = "long y title is Residuals of Seq_SSN ~ Mean.pi")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNPiResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
summary(m.ssn.elev.pi.good)
##### Code #####
## load libraries:
library(sf)
library(raster)
library(tmap)
# load World data from the tmap package
data("World")
# cut down to just the Spain data
spain <- World[World$iso_a3 == "ESP", ]
# load the population metadata for population locations
metadata <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/pop_metadata.csv")
# load the elevation raster, downloaded from WorldClim. Highest resolution is best because on small scale.
elev_raster = raster("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/WorldClim/Elev/wc2.1_30s_elev.tif")
# crop elevation raster down to the size of spain
spain_elev <- crop(elev_raster, spain)
plot(spain_elev)
# Make a spatial polygon that includes only the pyrenees region
# got extent values from the min and max lat and long of the populations (originally -0.50, 3.5, 41.00, 43.00)
# but max x is actually 3.16, so changes to 3.2
# but this means the pyrenees extend out beyond the limits of spain... becuase the spain elev raster x max is 3.04
pyrenees <- as(extent(-0.50, 3.2, 41.00, 43.00), 'SpatialPolygons')
# set the coordinate reference system to match the elevation and World dataset
crs(pyrenees) <- "+proj=longlat +datum=WGS84 +no_defs"
# Get the location for points and set coordinate reference system
pop_loc <- data.frame(lon = metadata$Lon_DecDeg, lat = metadata$Lat_DecDeg, pop = metadata$PopCode) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
pop_coc <- data.frame(lon = c(metadata$Lon_DecDeg, 3.19), lat = c(metadata$Lat_DecDeg,42.31), pop = c(metadata$PopCode, "COC_Cast")) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
st_is_longlat(pop_loc)
# First, make a quick map without detail.
# this would be a good subset panel to show which region is shown in detail.
outline <- tm_shape(spain) +
tm_borders("black", lwd = 1)+
tm_shape(pyrenees) +
tm_borders("red", lwd = 1)
outline
# First, make a quick map without detail.
# this would be a good subset panel to show which region is shown in detail.
outline <- tm_shape(spain) +
tm_borders("black", lwd = 1)+
tm_shape(pyrenees) +
tm_borders("red", lwd = 1)
outline
tmap_save(outline, "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/OutlineMap.png", dpi = 1000)
# Then, make the detailed map
# Now crop elevation raster down to pyrenees region, with a little buffer for labels to fit
pyr_elev <- crop(elev_raster, as(extent(-0.50, 3.5, 41.00, 43.00), 'SpatialPolygons'))
# manual jitter for labels -> built in jitter (auto.placement) was too random and not lining up well.
pop_loc2 <- data.frame(lon = c(metadata$Lon_DecDeg[1:6], metadata$Lon_DecDeg[7]-0.04,
metadata$Lon_DecDeg[8:10], metadata$Lon_DecDeg[11]+0.04,
metadata$Lon_DecDeg[12:16]),
lat = c(metadata$Lat_DecDeg[1:6]+0.06, metadata$Lat_DecDeg[7]-0.06,
metadata$Lat_DecDeg[8]+0.06, metadata$Lat_DecDeg[9]-0.06,
metadata$Lat_DecDeg[10:16]+0.06),
pop = metadata$PopCode) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
st_is_longlat(pop_loc2)
tmap_mode("plot")
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('for.cols', palette=c(blue = 'blue', green = 'green', red = 'red', yellow = 'orange'),
stretch.palette = FALSE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = FALSE, legend.shape.show =  FALSE)
## trying to find elevation of this population. based on this, it should be the 500 number and not the 200 number.
tmp_coc <- crop(elev_raster, as(extent(3.0, 3.5, 42.2, 42.4), 'SpatialPolygons'))
tm_shape(tmp_coc)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_coc)+
tm_symbols()
#8/3/2023 update - working on different coloring scheme
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$elev <- as.factor(c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 332, 991, 1605))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
# try to color like background
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('elev', palette=terrain.colors(16),
stretch.palette = TRUE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = TRUE, legend.shape.show =  FALSE)
# just make a black point
black <-  tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.8, title = "Elevation")+
tm_legend(scale = 0.4, legend.outside = FALSE, legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE, size = 1)+
tm_shape(pop_loc)+
tm_symbols(col = "black", border.col = "black", shape = 21,
stretch.palette = TRUE, size = 0.25,
legend.col.show = FALSE, legend.shape.show =  FALSE)
black
pop_loc2
pop_loc2 <- data.frame(lon = c(metadata$Lon_DecDeg[1:6], metadata$Lon_DecDeg[7]-0.04,
metadata$Lon_DecDeg[8:10], metadata$Lon_DecDeg[11]+0.04,
metadata$Lon_DecDeg[12:16]),
lat = c(metadata$Lat_DecDeg[1:5]+0.06, metadata$Lat_DecDeg[6]+0.04, metadata$Lat_DecDeg[7]-0.06,
metadata$Lat_DecDeg[8]+0.06, metadata$Lat_DecDeg[9]-0.06,
metadata$Lat_DecDeg[10:16]+0.06),
pop = metadata$PopCode) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
st_is_longlat(pop_loc2)
tmap_mode("plot")
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('for.cols', palette=c(blue = 'blue', green = 'green', red = 'red', yellow = 'orange'),
stretch.palette = FALSE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = FALSE, legend.shape.show =  FALSE)
## trying to find elevation of this population. based on this, it should be the 500 number and not the 200 number.
tmp_coc <- crop(elev_raster, as(extent(3.0, 3.5, 42.2, 42.4), 'SpatialPolygons'))
tm_shape(tmp_coc)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_coc)+
tm_symbols()
#8/3/2023 update - working on different coloring scheme
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$elev <- as.factor(c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 332, 991, 1605))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
# try to color like background
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('elev', palette=terrain.colors(16),
stretch.palette = TRUE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = TRUE, legend.shape.show =  FALSE)
# just make a black point
black <-  tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.8, title = "Elevation")+
tm_legend(scale = 0.4, legend.outside = FALSE, legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE, size = 1)+
tm_shape(pop_loc)+
tm_symbols(col = "black", border.col = "black", shape = 21,
stretch.palette = TRUE, size = 0.25,
legend.col.show = FALSE, legend.shape.show =  FALSE)
black
tmap_save(black, "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/BlackDotMap.png",
dpi = 1000,
outer.margins = c(0, 0, 0, 0),
insets_tm = outline,
insets_vp = viewport(x = unit(0.15, "npc"),
y = unit(0.18, "npc"),
width = unit(0.35, "npc"),
height = unit(0.35, "npc"),
default.units = "npc",
just = "centre",gp = gpar(),
clip = "inherit",
mask = "inherit",
xscale = c(0, 1),
yscale = c(0, 1),
angle = 0,
layout = NULL,
layout.pos.row = NULL, layout.pos.col = NULL,name = NULL),
width = 3 ,
height = 2,
units = 'in',
add.titles = "test")
??viewport
tmap_save(black, "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/BlackDotMap.png",
dpi = 1000,
outer.margins = c(0, 0, 0, 0),
insets_tm = outline,
insets_vp = st_viewport(x = unit(0.15, "npc"),
y = unit(0.18, "npc"),
width = unit(0.35, "npc"),
height = unit(0.35, "npc"),
default.units = "npc",
just = "centre",gp = gpar(),
clip = "inherit",
mask = "inherit",
xscale = c(0, 1),
yscale = c(0, 1),
angle = 0,
layout = NULL,
layout.pos.row = NULL, layout.pos.col = NULL,name = NULL),
width = 3 ,
height = 2,
units = 'in',
add.titles = "test")
library(grid)
tmap_save(black, "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/BlackDotMap.png",
dpi = 1000,
outer.margins = c(0, 0, 0, 0),
insets_tm = outline,
insets_vp = viewport(x = unit(0.15, "npc"),
y = unit(0.18, "npc"),
width = unit(0.35, "npc"),
height = unit(0.35, "npc"),
default.units = "npc",
just = "centre",gp = gpar(),
clip = "inherit",
mask = "inherit",
xscale = c(0, 1),
yscale = c(0, 1),
angle = 0,
layout = NULL,
layout.pos.row = NULL, layout.pos.col = NULL,name = NULL),
width = 3 ,
height = 2,
units = 'in',
add.titles = "test")
pop_loc2 <- data.frame(lon = c(metadata$Lon_DecDeg[1:6], metadata$Lon_DecDeg[7]-0.04,
metadata$Lon_DecDeg[8:10], metadata$Lon_DecDeg[11]+0.04,
metadata$Lon_DecDeg[12:16]),
lat = c(metadata$Lat_DecDeg[1:5]+0.06, metadata$Lat_DecDeg[6]+0.05, metadata$Lat_DecDeg[7]-0.06,
metadata$Lat_DecDeg[8]+0.06, metadata$Lat_DecDeg[9]-0.06,
metadata$Lat_DecDeg[10:16]+0.06),
pop = metadata$PopCode) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
st_is_longlat(pop_loc2)
tmap_mode("plot")
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('for.cols', palette=c(blue = 'blue', green = 'green', red = 'red', yellow = 'orange'),
stretch.palette = FALSE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = FALSE, legend.shape.show =  FALSE)
## trying to find elevation of this population. based on this, it should be the 500 number and not the 200 number.
tmp_coc <- crop(elev_raster, as(extent(3.0, 3.5, 42.2, 42.4), 'SpatialPolygons'))
tm_shape(tmp_coc)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_coc)+
tm_symbols()
#8/3/2023 update - working on different coloring scheme
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$elev <- as.factor(c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 332, 991, 1605))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
# try to color like background
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('elev', palette=terrain.colors(16),
stretch.palette = TRUE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = TRUE, legend.shape.show =  FALSE)
# just make a black point
black <-  tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.8, title = "Elevation")+
tm_legend(scale = 0.4, legend.outside = FALSE, legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE, size = 1)+
tm_shape(pop_loc)+
tm_symbols(col = "black", border.col = "black", shape = 21,
stretch.palette = TRUE, size = 0.25,
legend.col.show = FALSE, legend.shape.show =  FALSE)
black
tmap_save(black, "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/BlackDotMap.png",
dpi = 1000,
outer.margins = c(0, 0, 0, 0),
insets_tm = outline,
insets_vp = viewport(x = unit(0.15, "npc"),
y = unit(0.18, "npc"),
width = unit(0.35, "npc"),
height = unit(0.35, "npc"),
default.units = "npc",
just = "centre",gp = gpar(),
clip = "inherit",
mask = "inherit",
xscale = c(0, 1),
yscale = c(0, 1),
angle = 0,
layout = NULL,
layout.pos.row = NULL, layout.pos.col = NULL,name = NULL),
width = 3 ,
height = 2,
units = 'in',
add.titles = "test")
