eigenVectors_noCent_noBOS$lon <- metadata$Lon_DecDeg[match(eigenVectors_noCent_noBOS$Pop, metadata$PopCode)]
# order by elevation and make labels column
eigenVectors_test <- eigenVectors_test[order(eigenVectors_test$elev),]
eigenVectors_test$label <- paste0(eigenVectors_test$Pop, " - ", eigenVectors_test$elev, "m")
#eigenVectors_test$Pop <- as.factor(eigenVectors_test$Pop)
eigenVectors_test$Pop <- factor(eigenVectors_test$Pop, levels = unique(eigenVectors_test$Pop[order(eigenVectors_test$elev)]))
str(eigenVectors_test)
eigenVectors_noBOS <- eigenVectors_noBOS[order(eigenVectors_noBOS$elev),]
eigenVectors_noBOS$label <- paste0(eigenVectors_noBOS$Pop, " - ", eigenVectors_noBOS$elev, "m")
eigenVectors_noBOS$Pop <- factor(eigenVectors_noBOS$Pop, levels = unique(eigenVectors_noBOS$Pop[order(eigenVectors_noBOS$elev)]))
eigenVectors_noCent <- eigenVectors_noCent[order(eigenVectors_noCent$elev),]
eigenVectors_noCent$label <- paste0(eigenVectors_noCent$Pop, " - ", eigenVectors_noCent$elev, "m")
eigenVectors_noCent$Pop <- factor(eigenVectors_noCent$Pop, levels = unique(eigenVectors_noCent$Pop[order(eigenVectors_noCent$elev)]))
eigenVectors_noCent_noBOS <- eigenVectors_noCent_noBOS[order(eigenVectors_noCent_noBOS$elev),]
eigenVectors_noCent_noBOS$label <- paste0(eigenVectors_noCent_noBOS$Pop, " - ", eigenVectors_noCent_noBOS$elev, "m")
eigenVectors_noCent_noBOS$Pop <- factor(eigenVectors_noCent_noBOS$Pop, levels = unique(eigenVectors_noCent_noBOS$Pop[order(eigenVectors_noCent_noBOS$elev)]))
# let's make a subset dataframe of the variables we are interested in
cor_test <- eigenVectors_test[,c("PC1", "PC2", "PC3", "PC4", "elev", "lat", "lon")]
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
round(cor(cor_test), 2)
cot.test
cor.test
cor_test
head(eigenVectors_test)
# let's make a subset dataframe of the variables we are interested in
cor_test <- eigenVectors_test[,c("PC1", "PC2", "PC3", "PC4", "elev", "lat", "lon", "Pop")]
# let's make a subset dataframe of the variables we are interested in
cor_test <- eigenVectors_test[,c("PC1", "PC2", "PC3", "PC4", "elev", "lat", "lon", "Pop")]
cor_noBOS <- eigenVectors_noBOS[,c("PC1", "PC2", "PC3", "PC4", "elev", "lat", "lon", "Pop")]
cor_noCent <- eigenVectors_noCent[,c("PC1", "PC2", "PC3", "PC4", "elev", "lat", "lon", "Pop")]
cor_noCent_noBOS <- eigenVectors_noCent_noBOS[,c("PC1", "PC2", "PC3", "PC4", "elev", "lat", "lon", "Pop")]
summary_test <- cor_test %>%
group_by(Pop) %>%
summarize("elev" = mean(elev), "lat" = mean(lat), "lon" = mean(lon), "PC1" = mean(PC1), "PC2" = mean(PC2), "PC3" = mean(PC3), "PC4" = mean(PC4))
View(summary_test)
round(cor(summary_test), 2)
round(cor(summary_test[ ,2:7]), 2)
round(cor(summary_test[ ,2:8]), 2)
cor.test(summary_test$elev, summary_test$PC1)
# p = 0.0009217, cor = -0.745
cor.test(summary_test$elev, summary_test$PC2)
round(cor(summary_test[ ,2:8]), 2)
# p = 0.03083, cor = -0.5400
cor.test(summary_test$elev, summary_test$PC3)
cor.test(summary_test$elev, summary_test$PC4)
cor.test(summary_test$elev, summary_test$PC3)
cor.test(summary_test$elev, summary_test$PC4)
?scale_color_manual()
?ggplot2::scale_color_manual
?save()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
load("data/decay_chr.ROBJ")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(decay_chr) +
geom_line(aes(x = grp, y = r2_mean, col = as.factor(CHR_A), group = as.factor(CHR_A)))+
geom_point(aes(x = grp, y = r2_mean, col = as.factor(CHR_A)))+
scale_color_manual(name = "Chromosome", values = cbPalette)+
labs(x = "Distance Between SNPs (kb)", y = "Average R2")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust=0.25))
ggplot(decay_chr) +
geom_line(aes(x = grp, y = r2_mean, col = as.factor(CHR_A), group = as.factor(CHR_A)))+
geom_point(aes(x = grp, y = r2_mean, col = as.factor(CHR_A)))+
scale_color_manual(name = "Chromosome", values = cbPalette)+
labs(x = "Distance Between SNPs (kb)", y = "Average R2")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90))
ggplot(decay_chr) +
geom_line(aes(x = grp, y = r2_mean, col = as.factor(CHR_A), group = as.factor(CHR_A)))+
geom_point(aes(x = grp, y = r2_mean, col = as.factor(CHR_A)))+
scale_color_manual(name = "Chromosome", values = cbPalette)+
labs(x = "Distance Between SNPs (kb)", y = "Average R2")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(decay_chr) +
geom_line(aes(x = grp, y = r2_mean, col = as.factor(CHR_A), group = as.factor(CHR_A)))+
geom_point(aes(x = grp, y = r2_mean, col = as.factor(CHR_A)))+
scale_color_manual(name = "Chromosome", values = cbPalette)+
labs(x = "Distance Between SNPs (kb)", y = "Average R2")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(decay_chr) +
geom_line(aes(x = grp, y = r2_mean, col = as.factor(CHR_A), group = as.factor(CHR_A)))+
geom_point(aes(x = grp, y = r2_mean, col = as.factor(CHR_A)))+
scale_color_manual(name = "Chromosome", values = cbPalette)+
labs(x = "Distance Between SNPs (kb)", y = "Average R2")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(decay_chr) +
geom_line(aes(x = grp, y = r2_mean, col = as.factor(CHR_A), group = as.factor(CHR_A)))+
geom_point(aes(x = grp, y = r2_mean, col = as.factor(CHR_A)))+
scale_color_manual(name = "Chromosome", values = cbPalette)+
labs(x = "Distance Between SNPs (kb)", y = "Average R2")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggsave(filename = "LD_decay_chr.png", path = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/supp", height = 7, width = 7, device = "png", dpi = 500)
knitr::opts_chunk$set(echo = TRUE)
# read in packages
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(qqman))
# list of all the files I am interested in
files <- c("NoCent.PlinkFiltering_Binary.c", "NoCent.PlinkFiltering_raw.c",  "NoCent.PlinkFiltering_Asin.c", "NoCent.PlinkFiltering_Elev.c", "allSNPs.PlinkFiltering_Asin.c", "allSNPs.PlinkFiltering_raw.c", "allSNPs.PlinkFiltering_Elev.c", "allSNPs.PlinkFiltering_Binary.c", "allSNPs.PlinkFiltering_raw_subset.c", "NoCent.PlinkFiltering_raw_subset.c")
# could then theoretically lapply my function to this list of names
# does not include the testing file b/c not needed here.
library(praise)
##### do it time 3 #####
# read in top hits file
#top_hits_fdr_all <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/Top_hits_fdr_wald_Apr2023.csv")
top_hits_fdr_all <- read.csv("C:/Users/Sophia/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/Top_hits_fdr_wald_Apr2023.csv")
##### do it time 3 #####
# read in top hits file
#top_hits_fdr_all <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/Top_hits_fdr_wald_Apr2023.csv")
top_hits_fdr_all <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/Top_hits_fdr_wald_Apr2023.csv")
#make a 1000bp window centered on the SNP
top_hits_fdr_all$min <- top_hits_fdr_all$ps - 500
top_hits_fdr_all$max <- top_hits_fdr_all$ps + 500
# adding elevation back in on 1/25/2024 because I need the overlap analysis to be consistent between everything.
# using the "inverse of all' code so the first three columns are kept
th_nocent <- top_hits_fdr_all[, grep("all", colnames(top_hits_fdr_all), value = TRUE, invert = TRUE)]
View(th_nocent)
# using the 'inverse of nocent' code so the first three columns are also kept
th_all <- top_hits_fdr_all[, grep("nc", colnames(top_hits_fdr_all), value = TRUE, invert = TRUE)]
View(th_nocent)
# so count NAs, and  keep rows with fewer than 15 NAs (5 columns should have values for all rows)
# expect this to reduce rows that were only in all or only in nocent now that I've split them up.
th_nocent <- th_nocent[rowSums(is.na(th_nocent)) < 15 , ]
# sample size went down by ~3000
th_all <- th_all[rowSums(is.na(th_all)) < 15 , ]
# nested loops that give me an output that is a list of dataframes with at least 2 overlapping SNPs in the window
# after commenting out and testing on chromosome 5, it did keep the 1 SNP I had identified that should have been included and wasn't previously (5:13458838) which I think is a good sign, and the second function really cut down the included windows enough so I am going to commit, then remove the commented out lines from  the id_snps function that filter for only having 2+ rows because I don't need them anymore
id_snps <- function(input){
output <- list()
len <- length(input$ps) # to this point works
# loop that makes a list of all SNPs in the window
for (i in c(1:len)){
tmp_list <- c(input$min[i]:input$max[i])
tmp_df <- data.frame()
# loop that checks if snps in the dataframe are in the list of all SNPs in the window
for (j in c(1:len)){
if (input$ps[j] %in% tmp_list) {
tmp_df <- rbind(tmp_df, input[j, ])}
}
# add new dataframe to a list of dataframes to be in the output
output <- append(output, list(tmp_df))
}
return(output)
}
# include elev
nc_p_cols <- c("p_binary_nc", "p_raw_nc", "p_asin_nc", "p_subset_nc", "p_elev_nc")
all_p_cols <- c("p_binary_all", "p_raw_all", "p_asin_all", "p_subset_all", "p_elev_all")
gwas_overlap <- function(input, keep_cols){
cols_with_values <- c()
for(d in c(1:length(input))){
cols_with_values[d] <- sum(colSums(is.na(input[[d]][,keep_cols])) < length(input[[d]][ ,1]))
}
# then write out the dataframes from the initial list
output <- input[c(cols_with_values > 1)]
return(output)
}
##testing further below, but it seems to work!
praise()
##### no cent #####
# only keep the p value columns
hits_fdr_chr1 <- th_nocent[(th_nocent$chr == 1), c("chr", "rs", "ps", grep("p_", colnames(th_nocent), value = TRUE), "min", "max")]
# run that function!
chr1_overlap_nc <- id_snps(hits_fdr_chr1)
#1823 elements
length(unique(chr1_overlap_nc)) # 103 unique, 210 when including windows with only 1 SNP
# check for overlap between gwas types
OverlapHits_chr1_nc <- gwas_overlap(chr1_overlap_nc, nc_p_cols)
View(OverlapHits_chr1_nc)
OverlapHits_chr1_nc[[1]]
##### all  #####
# only keep the p value columns
hits_fdr_chr1_a <- th_all[(th_all$chr == 1), c("chr", "rs", "ps", grep("p_", colnames(th_all), value = TRUE), "min", "max")]
# fancy function I wrote
chr1_overlap_all <- id_snps(hits_fdr_chr1_a) # 306 elements
length(unique(chr1_overlap_all)) # 118 are unique, 244 are unique when including windows with only 1 SNP
# fancy function 2
OverlapHits_chr1_all <- gwas_overlap(chr1_overlap_all, all_p_cols)
hits_fdr_chr2 <- th_nocent[(th_nocent$chr == 2), c("chr", "rs", "ps", grep("p_", colnames(th_nocent), value = TRUE), "min", "max")]
# run that function!
chr2_overlap_nc <- id_snps(hits_fdr_chr2)
#1823 elements
length(unique(chr2_overlap_nc)) # 1184 unique
# check for overlap between gwas types
OverlapHits_chr2_nc <- gwas_overlap(chr2_overlap_nc, nc_p_cols)
hits_fdr_chr2_a <- th_all[(th_all$chr == 2), c("chr", "rs", "ps", grep("p_", colnames(th_all), value = TRUE), "min", "max")]
# fancy function I wrote
chr2_overlap_all <- id_snps(hits_fdr_chr2_a) # 1676 elements
length(unique(chr2_overlap_all)) # 1093 are unique
# fancy function 2
OverlapHits_chr2_all <- gwas_overlap(chr2_overlap_all, all_p_cols)
hits_fdr_chr3 <- th_nocent[(th_nocent$chr == 3), c("chr", "rs", "ps", grep("p_", colnames(th_nocent), value = TRUE), "min", "max")]
# run that function!
chr3_overlap_nc <- id_snps(hits_fdr_chr3)
#4301 elements
length(unique(chr3_overlap_nc)) # 2580 unique
# check for overlap between gwas types
OverlapHits_chr3_nc <- gwas_overlap(chr3_overlap_nc, nc_p_cols)
# list of 58
hits_fdr_chr3_a <- th_all[(th_all$chr == 3), c("chr", "rs", "ps", grep("p_", colnames(th_all), value = TRUE), "min", "max")]
# fancy function I wrote
chr3_overlap_all <- id_snps(hits_fdr_chr3_a) # 3124 elements
length(unique(chr3_overlap_all)) # 1933 are unique
# fancy function 2
OverlapHits_chr3_all <- gwas_overlap(chr3_overlap_all, all_p_cols)
# list of 44
##### no cent #####
# only keep the p value columns
hits_fdr_chr4 <- th_noelev_nocent[(th_noelev_nocent$chr == 4), c("chr", "rs", "ps", grep("p_", colnames(th_noelev_nocent), value = TRUE), "min", "max")]
##### no cent #####
# only keep the p value columns
hits_fdr_chr4 <- th_nocent[(th_nocent$chr == 4), c("chr", "rs", "ps", grep("p_", colnames(th_nocent), value = TRUE), "min", "max")]
# run that function!
chr4_overlap_nc <- id_snps(hits_fdr_chr4)
#1202 elements
length(unique(chr4_overlap_nc)) # 1647 unique
# check for overlap between gwas types
OverlapHits_chr4_nc <- gwas_overlap(chr4_overlap_nc, nc_p_cols)
hits_fdr_chr4_a <- th_all[(th_all$chr == 4), c("chr", "rs", "ps", grep("p_", colnames(th_all), value = TRUE), "min", "max")]
# fancy function I wrote
chr4_overlap_all <- id_snps(hits_fdr_chr4_a) # 3124 elements
length(unique(chr4_overlap_all)) # 1933 are unique
# fancy function 2
OverlapHits_chr4_all <- gwas_overlap(chr4_overlap_all, all_p_cols)
# list of 44
# only keep the p value columns
hits_fdr_chr5 <- th_nocent[(th_nocent$chr == 5), c("chr", "rs", "ps", grep("p_", colnames(th_nocent), value = TRUE), "min", "max")]
# run that function!
chr5_overlap_nc <- id_snps(hits_fdr_chr5)
#1202 elements
length(unique(chr5_overlap_nc)) # 761 unique
# check for overlap between gwas types
OverlapHits_chr5_nc <- gwas_overlap(chr5_overlap_nc, nc_p_cols)
hits_fdr_chr5_a <- th_all[(th_all$chr == 5), c("chr", "rs", "ps", grep("p_", colnames(th_all), value = TRUE), "min", "max")]
# fancy function I wrote
chr5_overlap_all <- id_snps(hits_fdr_chr5_a) # 1344 elements
length(unique(chr5_overlap_all)) # 938 are unique
# fancy function 2
OverlapHits_chr5_all <- gwas_overlap(chr5_overlap_all, all_p_cols)
#3437 elements
length(unique(chr5_overlap_nc)) # 761 unique
14+16+44+58+94+101+10+6+77+61
View(OverlapHits_chr1_all)
OverlapHits_chr1_all[[1]]
bind_rows(OverlapHits_chr1_all, .id = "column_label")
all_1 <- bind_rows(OverlapHits_chr1_all, .id = "column_label")
all_2 <- bind_rows(OverlapHits_chr2_all, .id = "column_label")
all_3 <- bind_rows(OverlapHits_chr3_all, .id = "column_label")
all_4 <- bind_rows(OverlapHits_chr4_all, .id = "column_label")
all_5 <- bind_rows(OverlapHits_chr5_all, .id = "column_label")
overlap_all <- rbind(all_1, all_2, all_3, all_4, all_5)
View(overlap_all)
unique(overlap_all$rs)
length(unique(overlap_all$rs))
View(overlap_all)
View(overlap_all)
?distinct()
all_1 <- bind_rows(OverlapHits_chr1_all)
all_2 <- bind_rows(OverlapHits_chr2_all)
all_3 <- bind_rows(OverlapHits_chr3_all)
all_4 <- bind_rows(OverlapHits_chr4_all)
all_5 <- bind_rows(OverlapHits_chr5_all)
overlap_all <- rbind(all_1, all_2, all_3, all_4, all_5)
length(unique(overlap_all$rs))
# hmm okay so this dataframe has 2386 observations but only 282 of them are actually unique rows and the rest are duplicates that are snps that show up in multiple windows....
overlap_all2 <- distinct(overlap_all)
View(overlap_all2)
nc_1 <- bind_rows(OverlapHits_chr1_nc)
nc_2 <- bind_rows(OverlapHits_chr2_nc)
nc_3 <- bind_rows(OverlapHits_chr3_nc)
nc_4 <- bind_rows(OverlapHits_chr4_nc)
nc_5 <- bind_rows(OverlapHits_chr5_nc)
overlap_nc <- rbind(nc_1, nc_2, nc_3, nc_4, nc_5)
length(unique(overlap_nc$rs))
# hmm okay so this dataframe has 2806 observations but only 289 of them are actually unique rows and the rest are duplicates that are snps that show up in multiple windows....
overlap_nc2 <- distinct(overlap_nc)
?write.csv
getwd()
write.csv(overlap_all2, file = "data/AllChrs_Overlap_20240125.csv", row.names = FALSE)
write.csv(overlap_nc2, file = "data/NoCent_Overlap_20240125.csv", row.names = FALSE)
all_1 <- bind_rows(OverlapHits_chr1_all, .id = "window")
View(all_1)
# one window does not have elevation, is only other
all_2 <- bind_rows(OverlapHits_chr2_all, .id = "window")
View(all_2)
# all windows include an elevation hit
all_3 <- bind_rows(OverlapHits_chr3_all, .id = "window")
all_4 <- bind_rows(OverlapHits_chr4_all, .id = "window")
all_5 <- bind_rows(OverlapHits_chr5_all, .id = "window")
View(all_4)
View(all_5)
View(all_1)
View(all_2)
View(all_4)
View(all_3)
View(overlap_all2)
library(dplyr)
library(ggplot2)
# read in data from local machine this time!
# plink filter, all
eigenValues_test <- read.delim("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/data/plinkPCA_plinkFilterTest.eigenval", sep = " ", header = F)
eigenVectors_test <- read.delim("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/data/plinkPCA_plinkFilterTest.eigenvec", sep = " ", header = F)
# each row is a genotype, each column is a PC.
colnames(eigenVectors_test) <- c("Line", "SeqID", paste0("PC", 1:(ncol(eigenVectors_test)-2)))
# calculate the PVE. Remember that I used 20 PCs, so this PVE is out of 20 PCs
pve_test <- round((eigenValues_test / (sum(eigenValues_test))*100), 2)
pve_test$PC <- c(1:20)
eigenVectors_test$Pop <- toupper(substr(eigenVectors_test$Line, 1, 3))
eigenVectors_test[eigenVectors_test$Pop == "ARB", "Pop"] <- "ARU"
eigenVectors_test[eigenVectors_test$Pop == "SPE", "Pop"] <- "SAL"
# load the meta data
metadata <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/SpanishMasterDataset_PopMetaData.csv", header = TRUE)
# clean up a little
metadata <- metadata[1:16,c("Population", "PopCode", "Elev_m", "Lat_DecDeg", "Lon_DecDeg")]
# merge
eigenVectors_test$elev <- metadata$Elev_m[match(eigenVectors_test$Pop, metadata$PopCode)]
# then match with row names to add metadata column
# do this for lat and long now too
eigenVectors_test$lat <- metadata$Lat_DecDeg[match(eigenVectors_test$Pop, metadata$PopCode)]
eigenVectors_test$lon <- metadata$Lon_DecDeg[match(eigenVectors_test$Pop, metadata$PopCode)]
eigenVectors_test <- eigenVectors_test[order(eigenVectors_test$elev),]
eigenVectors_test$label <- paste0(eigenVectors_test$Pop, " - ", eigenVectors_test$elev, "m")
#eigenVectors_test$Pop <- as.factor(eigenVectors_test$Pop)
eigenVectors_test$Pop <- factor(eigenVectors_test$Pop, levels = unique(eigenVectors_test$Pop[order(eigenVectors_test$elev)]))
str(eigenVectors_test)
# let's make a subset dataframe of the variables we are interested in
cor_test <- eigenVectors_test[,c("PC1", "PC2", "PC3", "PC4", "elev", "lat", "lon", "Pop")]
summary_test <- cor_test %>%
group_by(Pop) %>%
summarize("elev" = mean(elev), "lat" = mean(lat), "lon" = mean(lon), "PC1" = mean(PC1), "PC2" = mean(PC2), "PC3" = mean(PC3), "PC4" = mean(PC4))
round(cor(summary_test[ ,2:8]), 2)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
cor.test(summary_test$elev, summary_test$lat)
# cor = 0.58, p = 0.017
cor.test(summary_test$elev, summary_test$lon)
########## Visualize the Pixy results  ##########
library(dplyr)
library(ggplot2)
library(ggpubr)
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_04082022.ROBJ")
#tmp <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp)
#summary(tmp)
#
#tmp2 <- lm(Full_PopFlwrMean ~ Elev_m2 + Elev_m, data = comp)
#summary(tmp2)
#
#m.ssn.elev_3 <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp, contrasts=list(Elev_m=contr.sum, Elev_m2=contr.sum))
#anova(m.ssn.elev) # this would be the default so it would be type I
#library(car)
#Anova(m.ssn.elev, type = 3)
comp$Elev_c2 <- (comp$Elev_m - mean(comp$Elev_m))^2
###start <- 11000000 # Clark et al published num
####start <- 10000000
###stop <- 13350000 # Clark et al published num
####stop <- 15350000
###Chr5 <- Chr5[which(Chr5$window_pos_2 < start & Chr5$no_sites > min_sites | Chr5$window_pos_1 > stop & Chr5$no_sites > min_sites), ]
#### 7324 observations
###
#### now rbind them all back together
###dat.clean <- rbind(Chr1, Chr2, Chr3, Chr4, Chr5)
###save(dat.clean, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/pi_noCent_50k_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/pi_noCent_50k_04082022.ROBJ")
#save(comp.c, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_NoCent_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_NoCent_04082022.ROBJ")
###### fancy plots. ######
## pi
comp.c <- comp.c[order(comp.c$Elev_m),]
comp.c$pop <- as.factor(comp.c$pop)
comp.c$pop <- factor(comp.c$pop, levels = comp.c$pop[order(comp.c$Elev_m)])
# this looks like the right order
# key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
comp.c$labels <- paste0(comp.c$pop, " - ", comp.c$Elev_m, "m")
###### more complex model! ######
### with cent ###
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
# quick check that standardizing doesn't change p values:
tmp.standard2 <- lm(Seq_PopFlwrMean ~ scale(Elev_m) + scale(Elev_c2) + scale(Mean.pi), dat = comp)
# need to do a sequenced lines by elevation model to get the residuals from it.
tmp4_seq <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2, data = comp)
comp$Elev_residuals <- residuals(tmp4_seq) # index order matches row name order.
# there is maybe a positive relationship here?
# residuals range from -0.6 to 0.3
m.resid.pi2 <- lm(Elev_residuals ~ Mean.pi, dat = comp)
# then I want the inverse. so the residuals of ssn ~ mean.pi regressed with elevation
# making new model b/c need order to match comp row order and I think it will but why not just do it again
tmp.resid2 <- residuals(lm(Seq_PopFlwrMean ~ Mean.pi, data = comp))
tmp.resid2
plot(tmp.resid2)
# look pretty random
comp$Pi_residuals <- tmp.resid2
# not great, but doesn't include the quadratic term. Here I kinda see two curves
m.resid.elev2 <- lm(Pi_residuals ~ Elev_m + Elev_c2, dat = comp)
### Now use predict to get the predictions
newdata5 <- cbind(newdata, newdata2, Elev_residuals = seq(-0.7,0.4, length = 2000), Pi_residuals = seq(-0.8, 0.5, length = 2000) )
newdata <- data.frame(Elev_m = new_elev, Elev_m2 = (new_elev**2), Elev_c2 = ((new_elev - center_val)**2))
###### simulate data to draw lines on the plots where elevation is the predictor ######
new_elev <- seq(55,1750, length = 2000)
center_val <- mean(comp$Elev_m)
newdata <- data.frame(Elev_m = new_elev, Elev_m2 = (new_elev**2), Elev_c2 = ((new_elev - center_val)**2))
newdata2 <- data.frame(Mean.pi = seq(0.001,.0051, length = 2000))
### Now use predict to get the predictions
newdata5 <- cbind(newdata, newdata2, Elev_residuals = seq(-0.7,0.4, length = 2000), Pi_residuals = seq(-0.8, 0.5, length = 2000) )
#m.ssn.elev.pi.pred = predict(m.ssn.elev.pi, newdata = newdata5, se.fit = TRUE)
m.resid.pi2.pred = predict(m.resid.pi2, newdata = newdata5, se.fit = TRUE)
m.resid.elev2.pred = predict(m.resid.elev2, newdata = newdata5, se.fit = TRUE)
forplot5 <- data.frame('Elev_m' = newdata$Elev_m,
'Elev_m2' = newdata$Elev_m2,
'newd2' = newdata2,
'newd_res_elev' = newdata5$Elev_residuals,
'pred.m.resid.pi' = m.resid.pi2.pred,
'newd_res_pi' = newdata5$Pi_residuals,
'pred.m.resid.elev' = m.resid.elev2.pred)
## and plot
# might not need this code if running everything in a line, but I did it a different day so needed to order again
comp <- comp[order(comp$Elev_m),]
comp$pop <- as.factor(comp$pop)
comp$pop <- factor(comp$pop, levels = comp$pop[order(comp$Elev_m)])
str(comp$pop)
### this looks like the right order
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
comp$labels <- paste0(comp$pop, " - ", comp$Elev_m, "m")
ggplot(comp)+
geom_point(data=comp, aes(x=Mean.pi, y=Elev_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit+1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit-1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Nucleotide Diversity", y= "Elevation Residuals", title = "long y title is Residuals of Seq_SSN ~ Elevation + centered(Elevation)^2")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 19.5),
legend.spacing.y = unit(0.03, "cm"))
ggplot(comp)+
geom_point(data=comp, aes(x=Mean.pi, y=Elev_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit+1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit-1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Nucleotide Diversity", y= "Residual Short Stamen Number", title = "long y title is Residuals of Seq_SSN ~ Elevation + centered(Elevation)^2")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 19.5),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNElevQuadResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
# pi residuals
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Pi_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit+1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit-1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(y= "Nucleotide Diversity Residuals", x= "Elevation (m)", title = "long y title is Residuals of Seq_SSN ~ Mean.pi")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Pi_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit+1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit-1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(y= "Residual Short Stamen Number", x= "Elevation (m)", title = "long y title is Residuals of Seq_SSN ~ Mean.pi")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNPiResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
