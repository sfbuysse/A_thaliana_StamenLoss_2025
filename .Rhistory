min(stats)
max(stats)
min(stats, na.rm = TRUE)
max(stats, na.rm = TRUE)
sum_fst_pop <- c(mean(stats_pop, na.rm = TRUE), sd(stats_pop, na.rm = TRUE), min(stats_pop, na.rm = TRUE), max(stats_pop, na.rm = TRUE))
stats_pop <- as.vector(sub_10k_pop)
sum_fst_pop <- c(mean(stats_pop, na.rm = TRUE), sd(stats_pop, na.rm = TRUE), min(stats_pop, na.rm = TRUE), max(stats_pop, na.rm = TRUE))
sub_10k <- makeSym(sub_10k)
str(sub_10k)
diag(sub_10k) <- 0
fst_mat <- sub_10k
rownames(fst_mat) <- substr(rownames(fst_mat), start = 1, stop = 3)
colnames(fst_mat) <- substr(colnames(fst_mat), start = 1, stop = 3)
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'SPE'] <- "SAL"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'SPE'] <- "SAL"
save(fst_mat, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Fst_matrix_Dec2022_10k.ROBJ")
heatmap(x = fst_mat, symm = TRUE,
xlab = "Population",
ylab = "Population",
main = "Fst Heatmap",
keep.dendro = FALSE,
#Rowv = NA,
col= colorRampPalette(brewer.pal(8, "Oranges"))(255))
legend(x="bottomright", legend=c("0", "0.5", "1"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
pdf("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/Fst_heatmap_Dec2022_10k.pdf", height = 9, width = 11)
heatmap(x = fst_mat, symm = TRUE,
xlab = "Population",
ylab = "Population",
main = "Fst Heatmap",
keep.dendro = FALSE,
#Rowv = NA,
col= colorRampPalette(brewer.pal(8, "Oranges"))(255))
legend(x="bottomright", legend=c("0", "0.5", "1"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
dev.off()
## maybe it would be easier to reorder the matrix? scary time.
## to do that, would want to go back to before I make it symmetric I think (sub_10k object)
elev.nam <- c('RAB', 'PIN', 'SAL', 'HOR', 'ARU', 'BAR', 'COC', 'POB', 'BOS', 'MUR', 'VDM', 'ALE', 'BIS', 'PAL', 'VIE', 'PAN')
elev <- c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 303, 991, 1605)
elev_mat <- as.data.frame(sub_10k_pop)
colnames(elev_mat) <- substr(colnames(elev_mat), start = 1, stop = 3)
colnames(elev_mat)[colnames(elev_mat) == 'ARB'] <- "ARU"
colnames(elev_mat)[colnames(elev_mat) == 'SPE'] <- "SAL"
rownames(elev_mat) <- colnames (elev_mat)
elev_mat <- makeSym(elev_mat)
elev_mat <- as.matrix(elev_mat[elev.nam , elev.nam])
View(elev_mat)
row.labs <- paste0(elev.nam, " - ", elev[order(elev)], "m")
View(elev_mat)
pheatmap(elev_mat, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(brewer.pal(n = 9, name =
"YlOrRd"))(100), border_color = NA, labels_row = row.labs, fontsize_row = 15, fontsize_col = 15, filename = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/fst_heatmap_elevation_Dec2022_10k_pop.png",height = 9, width = 9)
library(diveRsity)
install.packages("diveRsity")
library(diveRsity)
##### visualizing fst matrices
library(RColorBrewer)
library(pheatmap)
##### functions
## to fill in top part of matrix
makeSym <- function(m) {
m[upper.tri(m)] <- t(m)[upper.tri(m)]
return(m)
}
## read in the matrix
sub_10k <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/PopGen/fastDivPart_plinkFilter_sub_SNPs_Dec16_2022/pairwiseFst_WC.csv", header = TRUE)
sub_10k_pop <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/PopGen/fastDivPart_plinkFilter_sub_SNPs_Pop_Dec16_2022/pairwiseFst_WC.csv", header = TRUE)
## reorganize
rownames(sub_10k) <- sub_10k[,1]
sub_10k <- sub_10k[1:16,2:17]
sub_10k <- lapply(sub_10k, as.numeric)
sub_10k <- as.matrix(as.data.frame(sub_10k))
View(sub_10k)
rownames(sub_10k) <- colnames(sub_10k)
# simplify for plotting
rownames(sub_10k) <- substr(rownames(sub_10k), start = 1, stop = 3)
colnames(sub_10k) <- substr(colnames(sub_10k), start = 1, stop = 3)
# get a mean and sd
stats <- as.vector(sub_10k)
sum_fst <- c(mean(stats, na.rm = TRUE), sd(stats, na.rm = TRUE), min(stats, na.rm = TRUE), max(stats, na.rm = TRUE))
sub_10k <- makeSym(sub_10k)
str(sub_10k)
diag(sub_10k) <- 0
str(sub_10k)
fst_mat <- sub_10k
View(fst_mat)
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'SPE'] <- "SAL"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'SPE'] <- "SAL"
save(fst_mat, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Fst_matrix_Dec2022_10k.ROBJ")
pdf("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/Fst_heatmap_Dec2022_10k.pdf", height = 9, width = 11)
heatmap(x = fst_mat, symm = TRUE,
xlab = "Population",
ylab = "Population",
main = "Fst Heatmap",
keep.dendro = FALSE,
#Rowv = NA,
col= colorRampPalette(brewer.pal(8, "Oranges"))(255))
legend(x="bottomright", legend=c("0", "0.5", "1"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
dev.off()
## add in elevation information
elev.nam <- c('RAB', 'PIN', 'SAL', 'HOR', 'ARU', 'BAR', 'COC', 'POB', 'BOS', 'MUR', 'VDM', 'ALE', 'BIS', 'PAL', 'VIE', 'PAN')
elev <- c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 303, 991, 1605)
elev_mat <- as.data.frame(sub_10k_pop)
colnames(elev_mat) <- substr(colnames(elev_mat), start = 1, stop = 3)
colnames(elev_mat)[colnames(elev_mat) == 'ARB'] <- "ARU"
colnames(elev_mat)[colnames(elev_mat) == 'SPE'] <- "SAL"
rownames(elev_mat) <- colnames (elev_mat)
View(elev_mat)
rownames(elev_mat) <- colnames(elev_mat)
View(elev_mat)
View(elev_mat)
## add in elevation information
elev.nam <- c('RAB', 'PIN', 'SAL', 'HOR', 'ARU', 'BAR', 'COC', 'POB', 'BOS', 'MUR', 'VDM', 'ALE', 'BIS', 'PAL', 'VIE', 'PAN')
elev <- c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 303, 991, 1605)
elev_mat <- as.data.frame(sub_10k)
colnames(elev_mat) <- substr(colnames(elev_mat), start = 1, stop = 3)
colnames(elev_mat)[colnames(elev_mat) == 'ARB'] <- "ARU"
colnames(elev_mat)[colnames(elev_mat) == 'SPE'] <- "SAL"
rownames(elev_mat) <- colnames(elev_mat)
elev_mat <- makeSym(elev_mat)
elev_mat <- as.matrix(elev_mat[elev.nam , elev.nam])
row.labs <- paste0(elev.nam, " - ", elev[order(elev)], "m")
pheatmap(elev_mat, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(brewer.pal(n = 9, name =
"YlOrRd"))(100), border_color = NA, labels_row = row.labs, fontsize_row = 15, fontsize_col = 15, filename = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/fst_heatmap_elevation_Dec2022_10k.png",height = 9, width = 9)
rm(sub_10k)
View(sub_10k_pop)
## reorganize
rownames(sub_10k_pop) <- sub_10k_pop[,1]
sub_10k_pop <- sub_10k_pop[1:16,2:17]
sub_10k_pop <- lapply(sub_10k_pop, as.numeric)
sub_10k_pop <- as.matrix(as.data.frame(sub_10k_pop))
rownames(sub_10k_pop) <- colnames(sub_10k_pop)
# simplify for plotting
rownames(sub_10k_pop) <- substr(rownames(sub_10k_pop), start = 1, stop = 3)
colnames(sub_10k_pop) <- substr(colnames(sub_10k_pop), start = 1, stop = 3)
# get a mean and sd
stats_pop <- as.vector(sub_10k_pop)
sum_fst_pop <- c(mean(stats_pop, na.rm = TRUE), sd(stats_pop, na.rm = TRUE), min(stats_pop, na.rm = TRUE), max(stats_pop, na.rm = TRUE))
sub_10k_pop <- makeSym(sub_10k_pop)
str(sub_10k_pop)
diag(sub_10k_pop) <- 0
str(sub_10k_pop)
fst_mat <- sub_10k_pop
View(fst_mat)
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'SPE'] <- "SAL"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'SPE'] <- "SAL"
save(fst_mat, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Fst_matrix_Dec2022_10k_pop.ROBJ")
pdf("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/Fst_heatmap_Dec2022_10k_pop.pdf", height = 9, width = 11)
heatmap(x = fst_mat, symm = TRUE,
xlab = "Population",
ylab = "Population",
main = "Fst Heatmap",
keep.dendro = FALSE,
#Rowv = NA,
col= colorRampPalette(brewer.pal(8, "Oranges"))(255))
legend(x="bottomright", legend=c("0", "0.5", "1"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
dev.off()
## add in elevation information - run from above if only doing this, but can use the elev_mat matrix made earlier.
elev_mat <- as.data.frame(sub_10k_pop)
View(elev_mat)
colnames(elev_mat)[colnames(elev_mat) == 'ARB'] <- "ARU"
colnames(elev_mat)[colnames(elev_mat) == 'SPE'] <- "SAL"
rownames(elev_mat) <- colnames(elev_mat)
elev_mat <- as.matrix(elev_mat[elev.nam , elev.nam])
row.labs <- paste0(elev.nam, " - ", elev[order(elev)], "m")
pheatmap(elev_mat, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(brewer.pal(n = 9, name =
"YlOrRd"))(100), border_color = NA, labels_row = row.labs, fontsize_row = 15, fontsize_col = 15, filename = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/fst_heatmap_elevation_Dec2022_10k_pop.png",height = 9, width = 9)
rm(ls= list())
rm(list=ls())
library(RColorBrewer)
library(pheatmap)
## to fill in top part of matrix
makeSym <- function(m) {
m[upper.tri(m)] <- t(m)[upper.tri(m)]
return(m)
}
##### for 10,000 randomly chosen snps #####
## read in the matrix
sub_10k <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/PopGen/fastDivPart_plinkFilter_sub_NoCent_SNPs_Jan5_2023/pairwiseFst_WC.csv", header = TRUE)
## reorganize
rownames(sub_10k) <- sub_10k[,1]
sub_10k <- sub_10k[1:16,2:17]
sub_10k <- lapply(sub_10k, as.numeric)
test <- as.matrix(as.data.frame(sub_10k))
rownames(test) <- colnames(test)
str(test)
# simplify for plotting
rownames(sub_10k) <- substr(rownames(sub_10k), start = 1, stop = 3)
View(sub_10k)
rm(test)
sub_10k <- as.matrix(as.data.frame(sub_10k))
rownames(sub_10k) <- colnames(sub_10k)
# simplify for plotting
rownames(sub_10k) <- substr(rownames(sub_10k), start = 1, stop = 3)
colnames(sub_10k) <- substr(colnames(sub_10k), start = 1, stop = 3)
str(test)
makeSym <- function(m) {
m[upper.tri(m)] <- t(m)[upper.tri(m)]
return(m)
}
##### for 10,000 randomly chosen snps #####
## read in the matrix
sub_10k <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/PopGen/fastDivPart_plinkFilter_sub_NoCent_SNPs_Jan5_2023/pairwiseFst_WC.csv", header = TRUE)
## reorganize
rownames(sub_10k) <- sub_10k[,1]
sub_10k <- sub_10k[1:16,2:17]
sub_10k <- lapply(sub_10k, as.numeric)
sub_10k <- as.matrix(as.data.frame(sub_10k))
rownames(sub_10k) <- colnames(sub_10k)
# simplify for plotting
rownames(sub_10k) <- substr(rownames(sub_10k), start = 1, stop = 3)
colnames(sub_10k) <- substr(colnames(sub_10k), start = 1, stop = 3)
str(sub_10k)
View(sub_10k)
# get a mean and sd
stats <- as.vector(sub_10k)
sum_fst <- c(mean(stats, na.rm = TRUE), sd(stats, na.rm = TRUE), min(stats, na.rm = TRUE), max(stats, na.rm = TRUE))
sub_10k <- makeSym(sub_10k)
str(sub_10k)
diag(sub_10k) <- 0
str(sub_10k)
fst_mat <- sub_10k
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'ARB'] <- "ARU"
substr(rownames(fst_mat),1,3)[substr(rownames(fst_mat),1,3) == 'SPE'] <- "SAL"
substr(colnames(fst_mat),1,3)[substr(colnames(fst_mat),1,3) == 'SPE'] <- "SAL"
save(fst_mat, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Fst_matrix_NoCent_Dec2022_10k.ROBJ")
pdf("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/Fst_heatmap_NoCent_Dec2022_10k.pdf", height = 9, width = 11)
heatmap(x = fst_mat, symm = TRUE,
xlab = "Population",
ylab = "Population",
main = "Fst Heatmap",
keep.dendro = FALSE,
#Rowv = NA,
col= colorRampPalette(brewer.pal(8, "Oranges"))(255))
legend(x="bottomright", legend=c("0", "0.5", "1"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
dev.off()
## add in elevation information
elev.nam <- c('RAB', 'PIN', 'SAL', 'HOR', 'ARU', 'BAR', 'COC', 'POB', 'BOS', 'MUR', 'VDM', 'ALE', 'BIS', 'PAL', 'VIE', 'PAN')
elev <- c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 303, 991, 1605)
elev_mat <- as.data.frame(sub_10k)
colnames(elev_mat) <- substr(colnames(elev_mat), start = 1, stop = 3)
colnames(elev_mat)[colnames(elev_mat) == 'ARB'] <- "ARU"
colnames(elev_mat)[colnames(elev_mat) == 'SPE'] <- "SAL"
rownames(elev_mat) <- colnames(elev_mat)
View(elev_mat)
elev_mat <- as.matrix(elev_mat[elev.nam , elev.nam])
row.labs <- paste0(elev.nam, " - ", elev[order(elev)], "m")
pheatmap(elev_mat, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(brewer.pal(n = 9, name =
"YlOrRd"))(100), border_color = NA, labels_row = row.labs, fontsize_row = 15, fontsize_col = 15, filename = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/fst_heatmap_NoCent_elevation_Dec2022_10k.png",height = 9, width = 9)
sub_10k_pop <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/PopGen/fastDivPart_plinkFilter_sub_NoCent_SNPs_Pop_Jan6_2023/pairwiseFst_WC.csv", header = TRUE)
sub_10k_pop <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/PopGen/fastDivPart_plinkFilter_sub_NoCent_SNPs_Pop_Jan6_2023/pairwiseFst_WC.csv", header = TRUE)
rm(sub_10k)
rm(stats)
rm(sum_fst)
rm(fst_mat)
rm(elev_mat)
## reorganize
rownames(sub_10k_pop) <- sub_10k_pop[,1]
sub_10k_pop <- sub_10k_pop[1:16,2:17]
sub_10k_pop <- lapply(sub_10k_pop, as.numeric)
sub_10k_pop <- as.matrix(as.data.frame(sub_10k_pop))
rownames(sub_10k_pop) <- colnames(sub_10k_pop)
View(sub_10k_pop)
stats_pop <- as.vector(sub_10k_pop)
sum_fst_pop <- c(mean(stats_pop, na.rm = TRUE), sd(stats_pop, na.rm = TRUE), min(stats_pop, na.rm = TRUE), max(stats_pop, na.rm = TRUE))
sub_10k_pop <- makeSym(sub_10k_pop)
str(sub_10k_pop)
diag(sub_10k_pop) <- 0
str(sub_10k_pop)
substr(rownames(sub_10k_pop),1,3)[substr(rownames(sub_10k_pop),1,3) == 'ARB'] <- "ARU"
substr(colnames(sub_10k_pop),1,3)[substr(colnames(sub_10k_pop),1,3) == 'ARB'] <- "ARU"
substr(rownames(sub_10k_pop),1,3)[substr(rownames(sub_10k_pop),1,3) == 'SPE'] <- "SAL"
substr(colnames(sub_10k_pop),1,3)[substr(colnames(sub_10k_pop),1,3) == 'SPE'] <- "SAL"
fst_mat <- sub_10k_pop
save(fst_mat, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Fst_matrix_NoCent_Dec2022_10k_pop.ROBJ")
pdf("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/Fst_heatmap_NoCent_Dec2022_10k_pop.pdf", height = 9, width = 11)
heatmap(x = fst_mat, symm = TRUE,
xlab = "Population",
ylab = "Population",
main = "Fst Heatmap",
keep.dendro = FALSE,
#Rowv = NA,
col= colorRampPalette(brewer.pal(8, "Oranges"))(255))
legend(x="bottomright", legend=c("0", "0.5", "1"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
dev.off()
## add in elevation information - run from above if only doing this, but can use elev lists from earlier
elev_mat <- as.data.frame(sub_10k_pop)
View(elev_mat)
elev_mat <- as.matrix(elev_mat[elev.nam , elev.nam])
pheatmap(elev_mat, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(brewer.pal(n = 9, name =
"YlOrRd"))(100), border_color = NA, labels_row = row.labs, fontsize_row = 15, fontsize_col = 15, filename = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/fst_heatmap_NoCent_elevation_Dec2022_10k_pop.png",height = 9, width = 9)
knitr::opts_chunk$set(echo = TRUE)
## load packages
library(emmeans)
library(lme4)
library(dplyr)
library(rcompanion) ## for plotNormalHistogram and blom functions (really don't need anymore if use hist() function)
library(MASS) ## for boxcox transformation
library(bestNormalize)
## load data
Sequenced <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/SpanishMasterDataset_Sequenced.csv")
PopMetaData <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/SpanishMasterDataset_PopMetaData.csv")
## format columns as factors
Sequenced <- Sequenced[,1:9]
Sequenced$SeqSampleID <- as.factor(Sequenced$SeqSampleID)
Sequenced$Population <- as.factor(Sequenced$Population)
Sequenced$Line <- as.factor(Sequenced$Line)
Sequenced$Rep <- as.factor(toupper(Sequenced$Rep))
# Plant is equivalent to Rep
Sequenced$Tube <- as.factor(Sequenced$Tube)
str(Sequenced)
## calculate raw means
Seq_RawMeans <- Sequenced %>% group_by(SeqSampleID) %>%
summarize(Seq_LineFlwrMean = mean(Short_Stamens))
# only keep some of the metadata that will be important later on
PopMetaData <- PopMetaData[, c("PopCode", "Elev_m")]
# LSMs
## create a fully nested random model
colnames(Sequenced)
# mixed model
S_m2 <- lmer(Short_Stamens ~ SeqSampleID + (1|Rep:Line:Population) + (1|Tube:Rep:Line:Population),
data = Sequenced)
S_m3 <- lmer(Short_Stamens ~ Line:Population + (1|Rep:Line:Population) + (1|Tube:Rep:Line:Population),
data = Sequenced)
# problem that data was dropped?
summary(S_m2)
anova(S_m2)
Seq_LSM <- summary(emmeans(S_m2, spec = "SeqSampleID"))
# compare values
Comp <- merge(Seq_RawMeans, Seq_LSM, by = "SeqSampleID")
View(Comp)
# let's see a correlations
cor.test(Comp$Seq_LineFlwrMean, Comp$emmean)
plot(Comp$Seq_LineFlwrMean ~ Comp$emmean)
lines(x = c(0,1,2), y = c(0,1,2))
# to do transformations, I really only care about the distribution of the means, not which line they belong to
raw_means <- Seq_RawMeans$Seq_LineFlwrMean
plotNormalHistogram(raw_means)
plotNormalHistogram(raw_means)
shapiro.test(raw_means)
tmp <- shapiro.test(raw_means)
tmp$p.value
tmp$statistic
# best normalize package
# tests Yeo-Johnson, Box Cox, log10(x+a), sqrt(x+a), and arcsinh
# a = max(0, -min(x)+eps)
# can use new_transform argument to give best Normalise a list of functions to also use (I think this is basically what I am doing by hand below??)
bestNormalize(raw_means, standardize = FALSE, warm = TRUE)
# squared
means_squared <- raw_means^2
# square root
means_sqrt <- sqrt(raw_means)
# cubic root
means_cubrt <- (raw_means)^(1/3)
# log10
means_log10 <- log10(raw_means)
# natural log
means_log <- log(raw_means)
#inverse
means_inv <- (raw_means)^(-1)
# exponential
means_exp <- exp(raw_means)
# asin_proportion
# doesn't work on values greater than 1 b/c is for proportions
means_asin <- asin(raw_means/2)
arcsinh(raw_means)
# asin_prop_sqrt
# some sources (https://www.programmingr.com/tutorial/arcsine-transformation/) describe the arcsine transformation as needing to be arcsine of the square root
means_asin_sqrt <- asin(sqrt(raw_means/2))
# tukey
means_tukey <- transformTukey(raw_means)
# boxcox
bc <- bestNormalize::boxcox(raw_means)
box <- MASS::boxcox(raw_means ~ 1, lambda = seq(-5,5,0.1))
cox <- data.frame(box$x, box$y)
cox2 <- cox[with(cox, order(-cox$box.y)),]
cox2[1,]
lambda <- cox2[1, "box.x"]
means_bc_bn <- predict(bc)
means_bc_MASS <- ((raw_means^lambda)-1)/lambda
# rank (don't want to use this one b/c it basically forces a normal distribution)
# could be an comparison though? maybe not.
means_qqnorm <- qqnorm(raw_means, plot = F)
means_rank <- means_qqnorm[["x"]]
# blom
means_blom <- blom(raw_means, method = "blom", alpha = 3/8, complete = T, na.last = NA)
shapiro.test(raw_means)#p.value
shapiro.test(raw_means)$p.value
###### make a list of my new phenotype lists #####
transformations <- list("raw" = raw_means, "squared" = means_squared, "sqrt" = means_sqrt, "Cube rt" = means_cubrt, "Log 10" = means_log10, "Natural Log" = means_log, "inverse" = means_inv, "exponential" = means_exp, "Asin of Proportion" = means_asin, "Asin of Sqrt(proportion)" = means_asin_sqrt, "Tukey" = means_tukey, "BoxCox (BestNormalize)" = means_bc_bn, "BoxCox (MASS)" = means_bc_MASS, "Rank" = means_rank, "Blom" = means_blom)
lapply(transformations, shapiro.test)
tmp <- lapply(transformations, shapiro.test)
View(tmp)
as.data.frame(tmp)
tmp <- lapply(transformations, shapiro.test$p.value)
tmp[[]][["p.value"]]
tmp[[1:15]][["p.value"]]
tmp[[1:15]}
tmp[[1:15]]
tmp[[1]]
names(tmp)
names(tmp)[1]
# make dataframe to compare results
norm.compare <- data.frame(names = names(tmp), stat = names(tmp), p.val = names(tmp))
i <-1
View(norm.compare)
norm.compare$names[i] <- names(tmp)[i] # if correct this shouldn't change anything
norm.compare$stat[i] <- tmp[[i]][["statistic"]]
norm.compare$p.val[i] <- tmp[[i]][["p.value"]]
View(norm.compare)
# make dataframe to compare results
norm.compare <- data.frame(names = names(tmp), stat = names(tmp), p.val = names(tmp))
for (i in 1:15) {
norm.compare$names[i] <- names(tmp)[i] # if correct this shouldn't change anything
norm.compare$stat[i] <- tmp[[i]][["statistic"]]
norm.compare$p.val[i] <- tmp[[i]][["p.value"]]
}
View(norm.compare)
# order of best to worst in terms of normality
norm.compare[(order(norm.compare$stat)), ]
?order()
# order of best to worst in terms of normality
norm.compare[(order(norm.compare$stat, decreasing = TRUE)), ]
## make plots of everything
for (i in 1:length(transformations)){
plotNormalHistogram(transformations[[i]], main = names(transformations)[i])
}
## and do shapiro wilks tests
SW_test <- lapply(transformations, shapiro.test)
# make dummy vector
SW_pval <- rep(NA, times = length(SW_test))
for (i in 1:length(SW_test)){
SW_pval[[i]] <- SW_test[[i]]$p.value
}
best_transformations <- data.frame("function" = names(transformations), "p.value" = SW_pval)
best_transformations[order(best_transformations$p.value, decreasing = TRUE), ]
View(norm.compare)
best_transformations[order(best_transformations$p.value, decreasing = TRUE), ]
# order of best to worst in terms of normality
norm.compare[(order(norm.compare$stat, decreasing = TRUE)), ]
# order of best to worst in terms of normality
norm.compare[(order(norm.compare$stat, decreasing = TRUE)), ]
hist(Seq_RawMeans$Seq_LineFlwrMean, breaks = 30)
no_2 <- Seq_RawMeans[Seq_RawMeans$Seq_LineFlwrMean < 2, ]
hist(no_2$Seq_LineFlwrMean)
no_close <- Seq_RawMeans[Seq_RawMeans$Seq_LineFlwrMean < 1.62, ]
hist(no_close$Seq_LineFlwrMean)
# choosing strict definition of trait loss, but this can be adjusted as long as I not that in my methods.
Seq_RawMeans$Binary[Seq_RawMeans$Seq_LineFlwrMean < 2] = 2
Seq_RawMeans$Binary <- c(rep(1, times = 61))
# choosing strict definition of trait loss, but this can be adjusted as long as I not that in my methods.
Seq_RawMeans$Binary[Seq_RawMeans$Seq_LineFlwrMean < 2] = 2
View(Seq_RawMeans)
new_fam <- data.frame("FID" = as.character(Seq_RawMeans$SeqSampleID), "IID" = as.character(Seq_RawMeans$SeqSampleID), "pheno" = Seq_RawMeans$Seq_LineFlwrMean)
# manually updated Pal-12 to PAL12 on all because the vcf has PAL12
new_fam$FID[new_fam$FID == "Pal-12"] <- "PAL12"
new_fam$IID[new_fam$IID == "Pal-12"] <- "PAL12"
View(new_fam)
# raw phenotypes
write.table(new_fam, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/FamFiles/RawLineMeans_08092022.txt", quote = FALSE, sep = " ", col.names = FALSE, row.names = FALSE)
# rank phenotypes
new_fam$rank <- means_rank
new_fam$pheno <- NULL
colnames(new_fam) <- c("FID", "IID", "pheno")
write.table(new_fam, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/FamFiles/RankLineMeans_08152022.txt", quote = FALSE, sep = " ", col.names = FALSE, row.names = FALSE)
# arcsin of sqrt of a proportion
new_fam$asin <- means_asin_sqrt
new_fam$pheno <- NULL
colnames(new_fam) <- c("FID", "IID", "pheno")
write.table(new_fam, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/FamFiles/AsinSqrtPropLineMeans_08152022.txt", quote = FALSE, sep = " ", col.names = FALSE, row.names = FALSE)
# elevation as the phenotype
new_fam$Pop <- toupper(substr(new_fam$FID, 1, 3))
new_fam$Pop[new_fam$Pop == "ARB"] <- "ARU"
new_fam$Pop[new_fam$Pop == "SPE"] <- "SAL"
new_fam <- merge(new_fam, PopMetaData, by.x = "Pop", by.y = "PopCode")
new_fam$Pop <- NULL
new_fam$pheno <- NULL
colnames(new_fam) <- c("FID", "IID", "pheno")
View(new_fam)
write.table(new_fam, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/FamFiles/ElevationByLine_08152022.txt", quote = FALSE, sep = " ", col.names = FALSE, row.names = FALSE)
# binary phenotype - strict definition
new_fam$binary <- Seq_RawMeans$Binary
new_fam$pheno <- NULL
colnames(new_fam) <- c("FID", "IID", "pheno")
View(new_fam)
write.table(new_fam, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/FamFiles/BinaryPhenotype_01102023.txt", quote = FALSE, sep = " ", col.names = FALSE, row.names = FALSE)
View(norm.compare)
View(new_fam)
Seq_RawMeans$Binary <- c(rep(0, times = 61))
# choosing strict definition of trait loss, but this can be adjusted as long as I not that in my methods.
Seq_RawMeans$Binary[Seq_RawMeans$Seq_LineFlwrMean < 2] = 1
View(Seq_RawMeans)
# binary phenotype - strict definition
## gemma says to use 0 for and 1 for
new_fam$binary <- Seq_RawMeans$Binary
new_fam$pheno <- NULL
colnames(new_fam) <- c("FID", "IID", "pheno")
View(new_fam)
write.table(new_fam, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/FamFiles/BinaryPhenotype_01102023.txt", quote = FALSE, sep = " ", col.names = FALSE, row.names = FALSE)
View(new_fam)
View(new_fam)

load("C:/Users/Sophia/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_12212021.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_12212021.ROBJ")
### strong correlation. r = -0.805 p = 0.0001704
m.pi.elev <- lm(Mean.pi ~ Elev_m, data = comp)
### r = -0.2257 p = 0.4
m.pi.ssn <- lm(Seq_PopFlwrMean ~ Mean.pi, dat = comp)
summary(m.pi.ssn)
### Pi and SSN ###
## here only use the sequenced lines because that is what pi was calculated from
plot(Seq_PopFlwrMean ~ Mean.pi, data = comp)
##### Correlation/regressions between Variables #######
### Pi and Elevation ###
plot(Mean.pi ~ Elev_m, data = comp)
### SSN and Elevation ###
## Do this with the Full means because we want the best picture of each popualtion
plot(Full_PopFlwrMean ~ Elev_m, data = comp)

