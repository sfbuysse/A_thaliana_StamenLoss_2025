scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
fig.name
git_name
fig_name
fig_name = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/supp/", identifier, "_QTLcomp")
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
levels(don_c$shared)
levels(don_a$shared)
levels(don_b$shared)
levels(don$shared)
levels(forplot$shared)
# list of shared SNPs - there are two lists for hits shared between cent included analyses and between cent excluded analyses with no overlap of the SNPs that are a hit in cent and no cent for the same type of GWAS - there is 1 hit only in cent and a different one only in no cent but 8/9 are shared between the two
# Cent only shared snps
cent <- c("Chr1:14262517",
"Chr3:2239234",
"Chr3:2253161",
"Chr3:2942726",
"Chr5:4899798",
"Chr5:4899803",
"Chr5:4920179",
"Chr5:10731997",
"Chr5:13458838"
)
identifier <- "allSNPs.PlinkFiltering_asin.c"
sig.level <- 0.05
type <- cent
filename = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/", identifier, ".assoc.txt")
fig_name = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/supp/", identifier, "_QTLcomp")
results <- read.delim(file= filename, header = T, stringsAsFactors = F)
# reorganize dataframe
forplot <- data.frame("BP" = results$ps, "CHR" = results$chr, "P" = results$p_wald, "SNP" = results$rs)
forplot$fdr <- p.adjust(p= forplot$P, method = "fdr")
#for point color...
forplot$fdr_col <- forplot$CHR
forplot[forplot$fdr_col == 1, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 2, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 3, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 4, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 5, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr < 0.10, "fdr_col"] <- "#1E88E5"
# allSNPs raw: cutoff for this is between 9.651559e-02 (6) and 1.004850e-01 (1)
forplot[forplot$fdr < 0.05, "fdr_col"] <- "#D66C93"
# allSNPs raw: cutoff for this is between 7.323552e-02 (6) and 4.269675e-03(7)
forplot$fdr_col <- as.factor(forplot$fdr_col)
#make the shared hits a 0 or something??
# add bonferroni correction p value
forplot$bon <- p.adjust(forplot$P, method = "bonferroni")
# add row for outlining shared SNPs
forplot$shared <- as.character(alpha(forplot$fdr_col, 0))
forplot[forplot$SNP %in% type, "shared"] <- alpha("green", 1)
# where are the QTL?
# chr1: 21551000:30245000
forplot[forplot$CHR == 1 & forplot$BP %in% c(21551000:30245000), "shared"] <- alpha("goldenrod", 1)
# chr3: 7329000:8201000
forplot[forplot$CHR == 3 & forplot$BP %in% c(7329000:8201000), "shared"] <- alpha("goldenrod", 1)
# chr5: 2408000:2986000
forplot[forplot$CHR == 5 & forplot$BP %in% c(2408000:2986000), "shared"] <- alpha("goldenrod", 1)
forplot$shared <- as.factor(forplot$shared)
###### manual plot #####
# prep to plot
don <- forplot %>%
# compute chromosome size in bp
group_by(CHR) %>%
summarize(chr_len=max(BP)) %>%
#calculate cumulative position of each chromosome (again in bp)
mutate(tot=cumsum(chr_len)-chr_len) %>%
dplyr::select(-chr_len) %>%
#add this info to the initial data set (so like adding new column and sorting by it)
left_join(forplot, ., by=c("CHR"="CHR")) %>%
#add cum position of each SNP
arrange(CHR, BP) %>%
mutate( psCum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(psCum) + min(psCum) ) /2 )
#sig.level is set in the function line. is 0.05 default but not expecting hits above that.
bonferroni_sig <- sig.level/length(forplot$P)
# and plot. should just make the 1 plot.
# split don into shared SNPs and not shared SNPs, then merging together so the shared snps are at the bottom of the dataframe and will be plotted on top of the other points.
# hopefully dn't need to also make QTL ones plotted near bottom...
don_a <- don[don$shared == "#00FF00FF", ]
don_b <- don[don$shared != "#00FF00FF", ]
don_c <- rbind(don_b, don_a)
# start plot with don_b because that is most of what I'll need
m_plot <- ggplot(don_c, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
knitr::opts_chunk$set(echo = TRUE)
identifier <- "allSNPs.PlinkFiltering_asin.c"
sig.level <- 0.05
type <- cent
# list of shared SNPs - there are two lists for hits shared between cent included analyses and between cent excluded analyses with no overlap of the SNPs that are a hit in cent and no cent for the same type of GWAS - there is 1 hit only in cent and a different one only in no cent but 8/9 are shared between the two
# Cent only shared snps
cent <- c("Chr1:14262517",
"Chr3:2239234",
"Chr3:2253161",
"Chr3:2942726",
"Chr5:4899798",
"Chr5:4899803",
"Chr5:4920179",
"Chr5:10731997",
"Chr5:13458838"
)
identifier <- "allSNPs.PlinkFiltering_asin.c"
sig.level <- 0.05
type <- cent
filename = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/", identifier, ".assoc.txt")
fig_name = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/supp/", identifier, "_QTLcomp")
results <- read.delim(file= filename, header = T, stringsAsFactors = F)
# reorganize dataframe
forplot <- data.frame("BP" = results$ps, "CHR" = results$chr, "P" = results$p_wald, "SNP" = results$rs)
forplot$fdr <- p.adjust(p= forplot$P, method = "fdr")
#for point color...
forplot$fdr_col <- forplot$CHR
forplot[forplot$fdr_col == 1, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 2, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 3, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 4, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 5, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr < 0.10, "fdr_col"] <- "#1E88E5"
# allSNPs raw: cutoff for this is between 9.651559e-02 (6) and 1.004850e-01 (1)
forplot[forplot$fdr < 0.05, "fdr_col"] <- "#D66C93"
# allSNPs raw: cutoff for this is between 7.323552e-02 (6) and 4.269675e-03(7)
forplot$fdr_col <- as.factor(forplot$fdr_col)
#make the shared hits a 0 or something??
# add bonferroni correction p value
forplot$bon <- p.adjust(forplot$P, method = "bonferroni")
# add row for outlining shared SNPs
forplot$shared <- as.character(alpha(forplot$fdr_col, 0))
library(ggplot2)
library(dplyr)
library(qqman)
library(ggpubr)
rm(list = ls())
# add row for outlining shared SNPs
forplot$shared <- as.character(alpha(forplot$fdr_col, 0))
identifier <- "allSNPs.PlinkFiltering_asin.c"
sig.level <- 0.05
type <- cent
# list of shared SNPs - there are two lists for hits shared between cent included analyses and between cent excluded analyses with no overlap of the SNPs that are a hit in cent and no cent for the same type of GWAS - there is 1 hit only in cent and a different one only in no cent but 8/9 are shared between the two
# Cent only shared snps
cent <- c("Chr1:14262517",
"Chr3:2239234",
"Chr3:2253161",
"Chr3:2942726",
"Chr5:4899798",
"Chr5:4899803",
"Chr5:4920179",
"Chr5:10731997",
"Chr5:13458838"
)
identifier <- "allSNPs.PlinkFiltering_asin.c"
sig.level <- 0.05
type <- cent
filename = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/", identifier, ".assoc.txt")
fig_name = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/supp/", identifier, "_QTLcomp")
results <- read.delim(file= filename, header = T, stringsAsFactors = F)
# reorganize dataframe
forplot <- data.frame("BP" = results$ps, "CHR" = results$chr, "P" = results$p_wald, "SNP" = results$rs)
forplot$fdr <- p.adjust(p= forplot$P, method = "fdr")
#for point color...
forplot$fdr_col <- forplot$CHR
forplot[forplot$fdr_col == 1, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 2, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 3, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 4, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 5, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr < 0.10, "fdr_col"] <- "#1E88E5"
# allSNPs raw: cutoff for this is between 9.651559e-02 (6) and 1.004850e-01 (1)
forplot[forplot$fdr < 0.05, "fdr_col"] <- "#D66C93"
# allSNPs raw: cutoff for this is between 7.323552e-02 (6) and 4.269675e-03(7)
forplot$fdr_col <- as.factor(forplot$fdr_col)
#make the shared hits a 0 or something??
# add bonferroni correction p value
forplot$bon <- p.adjust(forplot$P, method = "bonferroni")
# add row for outlining shared SNPs
forplot$shared <- as.character(alpha(forplot$fdr_col, 0))
forplot[forplot$SNP %in% type, "shared"] <- alpha("green", 1)
# where are the QTL?
# chr1: 21551000:30245000
forplot[forplot$CHR == 1 & forplot$BP %in% c(21551000:30245000), "shared"] <- alpha("goldenrod", 1)
# chr3: 7329000:8201000
forplot[forplot$CHR == 3 & forplot$BP %in% c(7329000:8201000), "shared"] <- alpha("goldenrod", 1)
# chr5: 2408000:2986000
forplot[forplot$CHR == 5 & forplot$BP %in% c(2408000:2986000), "shared"] <- alpha("goldenrod", 1)
forplot$shared <- as.factor(forplot$shared)
###### manual plot #####
# prep to plot
don <- forplot %>%
# compute chromosome size in bp
group_by(CHR) %>%
summarize(chr_len=max(BP)) %>%
#calculate cumulative position of each chromosome (again in bp)
mutate(tot=cumsum(chr_len)-chr_len) %>%
dplyr::select(-chr_len) %>%
#add this info to the initial data set (so like adding new column and sorting by it)
left_join(forplot, ., by=c("CHR"="CHR")) %>%
#add cum position of each SNP
arrange(CHR, BP) %>%
mutate( psCum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(psCum) + min(psCum) ) /2 )
#sig.level is set in the function line. is 0.05 default but not expecting hits above that.
bonferroni_sig <- sig.level/length(forplot$P)
# and plot. should just make the 1 plot.
# split don into shared SNPs and not shared SNPs, then merging together so the shared snps are at the bottom of the dataframe and will be plotted on top of the other points.
# hopefully dn't need to also make QTL ones plotted near bottom...
don_a <- don[don$shared == "#00FF00FF", ]
don_b <- don[don$shared != "#00FF00FF", ]
don_c <- rbind(don_b, don_a)
# start plot with don_b because that is most of what I'll need
m_plot <- ggplot(don_c, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
geom_segment(aes(x = 21551000, y = -0.001, xend = 30245000, yend = -0.001), col = "red")+
scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
don[don$CHR == 3 & don$BP == 7329000, ]
View(don_a)
View(don)
3417327 - 53539822
53539822-3417327
# start plot with don_b because that is most of what I'll need
m_plot <- ggplot(don_c, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
geom_segment(aes(x = 21551000, y = -0.1, xend = 30245000, yend = -0.1), col = "red")+
geom_segment(aes(x = (50122495+7329000), y = -0.1, xend = (50122495+ 8201000), yend = -0.1), col = "red")+
geom_segment(aes(x = 21551000, y = -0.001, xend = 30245000, yend = -0.001), col = "red")+
scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b because that is most of what I'll need
m_plot <- ggplot(don_c, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
geom_segment(aes(x = 21551000, y = -0.1, xend = 30245000, yend = -0.1), col = "red")+
geom_segment(aes(x = (50122495+7329000), y = -0.1, xend = (50122495+ 8201000), yend = -0.1), col = "red")+
geom_segment(aes(x =(92167091+2408000 ), y = -0.001, xend = (92167091+2986000 ), yend = -0.001), col = "red")+
scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b because that is most of what I'll need
m_plot <- ggplot(don_c, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
geom_segment(aes(x = 21551000, y = -0.3, xend = 30245000, yend = -0.3), col = "black")+
geom_segment(aes(x = (50122495+7329000), y = -0.3, xend = (50122495+ 8201000), yend = -0.3), col = "black")+
geom_segment(aes(x =(92167091+2408000 ), y = -0.3, xend = (92167091+2986000 ), yend = -0.3), col = "black")+
scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b because that is most of what I'll need
m_plot <- ggplot(don_c, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
geom_segment(aes(x = 21551000, y = -0.3, xend = 30245000, yend = -0.3), col = "black", lineend = "round")+
geom_segment(aes(x = (50122495+7329000), y = -0.3, xend = (50122495+ 8201000), yend = -0.3), col = "black")+
geom_segment(aes(x =(92167091+2408000 ), y = -0.3, xend = (92167091+2986000 ), yend = -0.3), col = "black")+
scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b because that is most of what I'll need
m_plot <- ggplot(don_c, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
geom_segment(aes(x = 21551000, y = -0.3, xend = 30245000, yend = -0.3), col = "black", lineend = "round")+
geom_segment(aes(x = (50122495+7329000), y = -0.3, xend = (50122495+ 8201000), yend = -0.3), col = "black", lineend = "round")+
geom_segment(aes(x =(92167091+2408000 ), y = -0.3, xend = (92167091+2986000 ), yend = -0.3), col = "black", lineend = "round")+
scale_fill_manual(values = alpha(levels(don_c$fdr_col),0.8)) +
scale_color_manual(values = levels(don_c$shared))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
##### Code #####
## load libraries:
library(sf)
library(raster)
library(tmap)
library(grid)
# load World data from the tmap package
data("World")
# cut down to just the Spain data
spain <- World[World$iso_a3 == "ESP", ]
# load the population metadata for population locations
metadata <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/pop_metadata.csv")
# load the population metadata for population locations
metadata <- read.csv("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/SpanishMasterDataset_PopMetaData.csv")
# load the elevation raster, downloaded from WorldClim. Highest resolution is best because on small scale.
elev_raster = raster("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/WorldClim/Elev/wc2.1_30s_elev.tif")
# crop elevation raster down to the size of spain
spain_elev <- crop(elev_raster, spain)
plot(spain_elev)
# Make a spatial polygon that includes only the pyrenees region
# got extent values from the min and max lat and long of the populations (originally -0.50, 3.5, 41.00, 43.00)
# but max x is actually 3.16, so changes to 3.2
# but this means the pyrenees extend out beyond the limits of spain... becuase the spain elev raster x max is 3.04
pyrenees <- as(extent(-0.50, 3.2, 41.00, 43.00), 'SpatialPolygons')
# set the coordinate reference system to match the elevation and World dataset
crs(pyrenees) <- "+proj=longlat +datum=WGS84 +no_defs"
# Get the location for points and set coordinate reference system
pop_loc <- data.frame(lon = metadata$Lon_DecDeg, lat = metadata$Lat_DecDeg, pop = metadata$PopCode) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
View(metadata)
metadata <- metadata[1:16, ]
# Get the location for points and set coordinate reference system
pop_loc <- data.frame(lon = metadata$Lon_DecDeg, lat = metadata$Lat_DecDeg, pop = metadata$PopCode) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
pop_coc <- data.frame(lon = c(metadata$Lon_DecDeg, 3.19), lat = c(metadata$Lat_DecDeg,42.31), pop = c(metadata$PopCode, "COC_Cast")) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
st_is_longlat(pop_loc)
# First, make a quick map without detail.
# this would be a good subset panel to show which region is shown in detail.
outline <- tm_shape(spain) +
tm_borders("black", lwd = 1)+
tm_shape(pyrenees) +
tm_borders("red", lwd = 1)
outline
tmap_save(outline, "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/OutlineMap.png", dpi = 1000)
# Then, make the detailed map
# Now crop elevation raster down to pyrenees region, with a little buffer for labels to fit
pyr_elev <- crop(elev_raster, as(extent(-0.50, 3.5, 41.00, 43.00), 'SpatialPolygons'))
# manual jitter for labels -> built in jitter (auto.placement) was too random and not lining up well.
pop_loc2 <- data.frame(lon = c(metadata$Lon_DecDeg[1:6], metadata$Lon_DecDeg[7]-0.04,
metadata$Lon_DecDeg[8:10], metadata$Lon_DecDeg[11]+0.04,
metadata$Lon_DecDeg[12:16]),
lat = c(metadata$Lat_DecDeg[1:5]+0.06, metadata$Lat_DecDeg[6]+0.05, metadata$Lat_DecDeg[7]-0.06,
metadata$Lat_DecDeg[8]+0.06, metadata$Lat_DecDeg[9]-0.06,
metadata$Lat_DecDeg[10:16]+0.06),
pop = metadata$PopCode) %>%
st_as_sf(coords = c("lon", "lat"), crs = '+proj=longlat +datum=WGS84 +no_defs ')
st_is_longlat(pop_loc2)
tmap_mode("plot")
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('for.cols', palette=c(blue = 'blue', green = 'green', red = 'red', yellow = 'orange'),
stretch.palette = FALSE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = FALSE, legend.shape.show =  FALSE)
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_scale_bar(position = c("right", "bottom"))+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('for.cols', palette=c(blue = 'blue', green = 'green', red = 'red', yellow = 'orange'),
stretch.palette = FALSE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = FALSE, legend.shape.show =  FALSE)
## trying to find elevation of this population. based on this, it should be the 500 number and not the 200 number.
tmp_coc <- crop(elev_raster, as(extent(3.0, 3.5, 42.2, 42.4), 'SpatialPolygons'))
tm_shape(tmp_coc)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_coc)+
tm_symbols()
tm_shape(tmp_coc)+
tm_raster(palette = terrain.colors(10), alpha = 0.6, title = "Elevation")+
tm_scale_bar(position = c("right", "bottom"))+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_coc)+
tm_symbols()
#8/3/2023 update - working on different coloring scheme
# add columns for color and shape control
# manually checked with scheme from other figures. could have done this with more automation with rep() and ordering by elevation?
pop_loc$for.cols <- as.factor(c("red", "red", "red", "green", "yellow", "red", "green",
"blue", "yellow", "yellow", "blue", "green", "green", "blue", "blue", "yellow"))
pop_loc$elev <- as.factor(c(1229, 416, 441, 1444, 715, 519, 413, 836, 1585, 1706, 177, 665, 61, 332, 991, 1605))
pop_loc$for.shape <- as.factor(c(2,0,1,0,0,5,1,0,2,1,5,2,5,2,1,5))
# as.factor is important.
pop_loc$pop <- as.factor(pop_loc$pop)
# try to color like background
tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.6, title = "Elevation")+
tm_scale_bar(position = c("right", "bottom"))+
tm_legend(legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE)+
tm_shape(pop_loc)+
tm_symbols('elev', palette=terrain.colors(16),
stretch.palette = TRUE, size = 0.5, shape = 'for.shape',
shapes = c('0' = 22, '1' = 21, '2' = 24, '5' = 23),
legend.col.show = TRUE, legend.shape.show =  FALSE)
# just make a black point
black <-  tm_shape(pyr_elev)+
tm_raster(palette = terrain.colors(16), alpha = 0.8, title = "Elevation")+
tm_scale_bar(position = c("right", "bottom"))+
tm_legend(scale = 0.4, legend.outside = FALSE, legend.position = c("right", "bottom"))+
tm_shape(pop_loc2)+
tm_text('pop', col = 'black', auto.placement = FALSE, size = 1)+
tm_shape(pop_loc)+
tm_symbols(col = "black", border.col = "black", shape = 21,
stretch.palette = TRUE, size = 0.25,
legend.col.show = FALSE, legend.shape.show =  FALSE)
black
tmap_save(black, "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/BlackDotMap.png",
dpi = 1000,
outer.margins = c(0, 0, 0, 0),
insets_tm = outline,
insets_vp = viewport(x = unit(0.15, "npc"),
y = unit(0.18, "npc"),
width = unit(0.35, "npc"),
height = unit(0.35, "npc"),
default.units = "npc",
just = "centre",gp = gpar(),
clip = "inherit",
mask = "inherit",
xscale = c(0, 1),
yscale = c(0, 1),
angle = 0,
layout = NULL,
layout.pos.row = NULL, layout.pos.col = NULL,name = NULL),
width = 3 ,
height = 2,
units = 'in',
add.titles = "test")
