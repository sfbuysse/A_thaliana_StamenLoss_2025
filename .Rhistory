labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
# choosing topo as the color scheme, so commenting out all the terrain plots.
# with a linear fit line of elevation explaining mean pi
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Mean.pi, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
alpha = 0.7, linewidth = 1.25)+
# choosing topo as the color scheme, so commenting out all the terrain plots.
# with a linear fit line of elevation explaining mean pi
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Mean.pi, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit+1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit-1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.position = "none",
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/PiPerPop_topo.png",
height = 4, width = 4, unit = "in", device = "png", dpi = 700)
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Mean.pi, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit+1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit-1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.position = "none",
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/PiPerPop_topo.png",
height = 7, width = 9, device = "png", dpi = 700)
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Mean.pi, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit+1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit-1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
# legend.position = "none", to remove the legend - keeping for now b/c of how I have adjusted the sizes of stuff
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/PiPerPop_topo.png",
height = 7, width = 9, device = "png", dpi = 700)
# with a linear fit line of elevation explaining mean pi
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Mean.pi, shape = as.factor(pop), col= as.factor(pop)), size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit+1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.pi.el.fit-1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_color_manual(name = "Population",
labels = comp$label,
values = c(rep(c("red", "orange", "green", "blue"), times = c(4,4,4,4))))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(0, 1, 2, 5), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 16),
legend.text = element_text(color = "black", size = 16),
axis.title = element_text(color = "black", size = 16),
axis.text = element_text(color = "black", size = 16),
legend.spacing.y = unit(0.03, "cm"))
### ssn by elevation
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Full_PopFlwrMean, shape = as.factor(pop), fill = Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit+1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit-1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Mean Short Stamen Number", title = "")+ # - Full Phenotype Set
scale_fill_gradientn(name = "Elevation", colours = topo.colors(10))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20))
### ssn by elevation
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Full_PopFlwrMean, shape = as.factor(pop), fill = Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit+1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit-1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Mean Short Stamen Number", title = "")+ # - Full Phenotype Set
scale_fill_gradientn(name = "Elevation", colours = topo.colors(10))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/MeanSSNByElev_topo.png",
height = 7, width = 9, device = "png", dpi = 700)
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Full_PopFlwrMean, shape = as.factor(pop), fill = Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit+1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot2, aes(x = newd1, y = pred.ssn.el.fit-1.96*pred.ssn.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Mean Short Stamen Number", title = "")+ # - Full Phenotype Set
scale_fill_gradientn(name = "Elevation", colours = topo.colors(10))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/MeanSSNByElev_topo.png",
height = 7, width = 9, device = "png", dpi = 700)
summary(tp4)
summary(tmp4)
require(dplyr)
require(ggplot2)
require(ggpubr)
###start <- 11000000 # Clark et al published num
####start <- 10000000
###stop <- 13350000 # Clark et al published num
####stop <- 15350000
###Chr5 <- Chr5[which(Chr5$window_pos_2 < start & Chr5$no_sites > min_sites | Chr5$window_pos_1 > stop & Chr5$no_sites > min_sites), ]
#### 7324 observations
###
#### now rbind them all back together
###dat.clean <- rbind(Chr1, Chr2, Chr3, Chr4, Chr5)
###save(dat.clean, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/pi_noCent_50k_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/pi_noCent_50k_04082022.ROBJ")
# final object is saved and loaded below.
sums.c <- dat.clean %>% group_by(pop) %>% summarize(Sum.count.diff = sum(count_diffs, na.rm = T), Sum.count.comp = sum(count_comparisons, na.rm = T))
sums.c$Mean.pi.c <- sums.c$Sum.count.diff/sums.c$Sum.count.comp
# this should be right following the pixy documentation
sum.comparison <- data.frame('all' = sums$Mean.pi, 'noCent' = sums.c$Mean.pi.c, 'pop' = sums$pop, 'pop.c' = sums.c$pop)
cor.test(sum.comparison$all, sum.comparison$noCent, method = "pearson")
ggplot()+
geom_point()+
geom_abline(aes(intercept = 0, slope = 1))+
theme_classic()
#save(comp.c, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_NoCent_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_NoCent_04082022.ROBJ")
###start <- 11000000 # Clark et al published num
####start <- 10000000
###stop <- 13350000 # Clark et al published num
####stop <- 15350000
###Chr5 <- Chr5[which(Chr5$window_pos_2 < start & Chr5$no_sites > min_sites | Chr5$window_pos_1 > stop & Chr5$no_sites > min_sites), ]
#### 7324 observations
###
#### now rbind them all back together
###dat.clean <- rbind(Chr1, Chr2, Chr3, Chr4, Chr5)
###save(dat.clean, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/pi_noCent_50k_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/pi_noCent_50k_04082022.ROBJ")
# final object is saved and loaded below.
sums.c <- dat.clean %>% group_by(pop) %>% summarize(Sum.count.diff = sum(count_diffs, na.rm = T), Sum.count.comp = sum(count_comparisons, na.rm = T))
sums.c$Mean.pi.c <- sums.c$Sum.count.diff/sums.c$Sum.count.comp
# this should be right following the pixy documentation
sum.comparison <- data.frame('all' = sums$Mean.pi, 'noCent' = sums.c$Mean.pi.c, 'pop' = sums$pop, 'pop.c' = sums.c$pop)
####Need to read in the results
dat <- read.delim("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/pixy_042022/all_filtered.50k_pi_042022.out_pi.txt", header=TRUE)
########## with Centromeres ##########
#most of this just goes in the supplement.
###### Calculate Population global pi ######
##### use dyplyr to group by population
#### make a facto
###dat$pop <- as.factor(dat$pop)
#### calculate the aggregated value
#### (window 1 count_diffs + window 2 count_diffs) / (window 1 comparisons + window 2 comparisons)
sums <- dat %>% group_by(pop) %>% summarize(Sum.count.diff = sum(count_diffs, na.rm = T), Sum.count.comp = sum(count_comparisons, na.rm = T))
sums$Mean.pi <- sums$Sum.count.diff/sums$Sum.count.comp
# this should be right following the pixy documentation
sum.comparison <- data.frame('all' = sums$Mean.pi, 'noCent' = sums.c$Mean.pi.c, 'pop' = sums$pop, 'pop.c' = sums.c$pop)
cor.test(sum.comparison$all, sum.comparison$noCent, method = "pearson")
ggplot()+
geom_point()+
geom_abline(aes(intercept = 0, slope = 1))+
theme_classic()
ggplot(data = sum.comparison)+
geom_point(aes(x = all, y = noCent))+
geom_abline(aes(intercept = 0, slope = 1))+
theme_classic()
# this section is a little out of order b/c I need the labels from comp2.c dataframe
### something went wrong here and the coloring doesn't seem to  match up
ggplot(sum.comparison)+
geom_point(aes(x = all, y = noCent, shape = as.factor(pop.c), col= as.factor(pop.c)), size = 4, stroke = 1.25)+
geom_abline(intercept = 0, slope = 1)+
labs(x= "All Windows Pi", y= "Centromere Excluded Pi", title = "")+
scale_color_manual(name = "Population",
labels = comp.c$label,
values = c(rep(c("red", "orange", "green", "blue"), times = c(4,4,4,4)), "black"))+ # black not needed unless all is included
scale_shape_manual(name = "Population",
labels = comp.c$label,
values = c(rep(c(0, 1, 2, 5), times = 4), 0))+ # extra 0 not needed unless all is included
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.01, "cm"),
axis.title = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 12))
# check how similar the pi values are
cor(x=comp$Mean.pi, y=comp.c$Mean.pi.c)
#save(comp.c, file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_NoCent_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_NoCent_04082022.ROBJ")
# quite strong negative correlation
# p val = 0.0001808, cor = -0.802886
m2.pi.elev <- lm(Mean.pi.c ~ Elev_m, data = comp.c)
summary(m2.pi.elev)
# p = 0.3872
# cor = -0.2320122
# pretty weak like nothing going on here
m2.pi.ssn <- lm(Seq_PopFlwrMean ~ Mean.pi.c, dat = comp.c)
summary(m2.pi.ssn)
newdata3 <- data.frame(Elev_m = seq(55,1750, length = 2000))
newdata4 <- data.frame(Mean.pi.c = seq(0.0001,.004, length = 2000))
### Now use predict to get the predictions
m2.pi.elev.pred = predict(m2.pi.elev, newdata = newdata3, se.fit = TRUE)
m2.pi.ssn.pred = predict(m2.pi.ssn, newdata = newdata4, se.fit = TRUE)
forplot3 <- data.frame('newd3' = newdata3,
'newd4' = newdata4,
'pred.pi.el' = m2.pi.elev.pred,
'pred.pi.ssn' = m2.pi.ssn.pred)
comp.c <- comp.c[order(comp.c$Elev_m),]
comp.c$pop <- as.factor(comp.c$pop)
comp.c$pop <- factor(comp.c$pop, levels = comp.c$pop[order(comp.c$Elev_m)])
str(comp.c$pop)
# this looks like the right order
# key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
comp.c$labels <- paste0(comp.c$pop, " - ", comp.c$Elev_m, "m")
# with a linear fit line of elevation explaining mean pi
# topo
ggplot(comp.c)+
geom_point(data=comp.c, aes(x=Elev_m, y=Mean.pi.c, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot3, aes(x = Elev_m, y = pred.pi.el.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot3, aes(x = Elev_m, y = pred.pi.el.fit+1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot3, aes(x = Elev_m, y = pred.pi.el.fit-1.96*pred.pi.el.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Elevation (m)", y= "Nucleotide Diversity", title = "")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp.c$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/supp/ManuscriptFigs/PiPerPop_NoCent_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
ggplot(comp.c)+
geom_point(data=comp.c, aes(y=Seq_PopFlwrMean, x=Mean.pi.c, shape = as.factor(pop), fill = Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot3, aes(x = Mean.pi.c, y = pred.pi.ssn.fit), linetype = "solid",
alpha = 0.7, size = 1.25)+
geom_line(dat = forplot3, aes(x = Mean.pi.c, y = pred.pi.ssn.fit+1.96*pred.pi.ssn.se.fit), linetype = "solid",
alpha = 0.3, size = 0.75)+
geom_line(dat = forplot3, aes(x = Mean.pi.c, y = pred.pi.ssn.fit-1.96*pred.pi.ssn.se.fit), linetype = "solid",
alpha = 0.5, size = 0.75)+
labs(y="Mean Short Stamen Number" , x= "Nucleotide Diversity", title = "")+ # - Sequenced Only
scale_fill_gradientn(name = "Elevation", colours = topo.colors(10))+
scale_shape_manual(name = "Population",
labels = comp.c$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/supp/SSNbyPi_NoCent_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_04082022.ROBJ")
### quadratic regression and look at both the linear and quadratic components of the model (coefficients)
### for quadratic regression
comp$Elev_m2 <- (comp$Elev_m)^2
#tmp <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp)
#summary(tmp)
#
#tmp2 <- lm(Full_PopFlwrMean ~ Elev_m2 + Elev_m, data = comp)
#summary(tmp2)
#
#m.ssn.elev_3 <- lm(Full_PopFlwrMean ~ Elev_m + Elev_m2, data = comp, contrasts=list(Elev_m=contr.sum, Elev_m2=contr.sum))
#anova(m.ssn.elev) # this would be the default so it would be type I
#library(car)
#Anova(m.ssn.elev, type = 3)
comp$Elev_c2 <- (comp$Elev_m - mean(comp$Elev_m))^2
new_elev <- seq(55,1750, length = 2000)
center_val <- mean(comp$Elev_m)
newdata <- data.frame(Elev_m = new_elev, Elev_m2 = (new_elev**2), Elev_c2 = ((new_elev - center_val)**2))
newdata2 <- data.frame(Mean.pi = seq(0.001,.0051, length = 2000))
###### more complex model! ######
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrmean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
###### more complex model! ######
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
summary(m.ssn.elev.pi.good)
# quick check that standardizing doesn't change p values:
tmp.standard2 <- lm(Seq_PopFlwrMean ~ scale(Elev_m) + scale(Elev_c2) + scale(Mean.pi), dat = comp)
summary(tmp.standard2)
# need to do a sequenced lines by elevation model to get the residuals from it.
tmp4_seq <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2, data = comp)
plot(residuals(tmp4_seq))
# decentlyrandom when not coloring by anything
summary(tmp4_seq)
# now need to use the residuals in a plot
comp$Elev_residuals <- residuals(tmp4_seq) # index order matches row name order.
plot(comp$Elev_residuals, comp$Elev_m)
# now need to use the residuals in a plot - quick plot to start
plot(comp$Mean.pi, comp$Elev_residuals)
min(comp$Elev_residuals)
max(comp$Elev_residuals)
# there is maybe a positive relationship here?
# residuals range from -0.6 to 0.3
m.resid.pi2 <- lm(Elev_residuals ~ Mean.pi, dat = comp)
summary(m.resid.pi2)
lm(Seq_PopFlwrMean ~ Mean.pi, data = comp)
# then I want the inverse. so the residuals of ssn ~ mean.pi regressed with elevation
# making new model b/c need order to match comp row order and I think it will but why not just do it again
tmp.resid2 <- residuals(lm(Seq_PopFlwrMean ~ Mean.pi, data = comp))
tmp.resid
tmp.resid2
plot(tmp.resid2)
# look pretty random
comp$Pi_residuals <- tmp.resid2
plot(comp$Elev_m, comp$Pi_residuals)
# not great, but doesn't include the quadratic term. Here I kinda see two curves
m.resid.elev2 <- lm(Pi_residuals ~ Elev_m + Elev_c2, dat = comp)
summary(m.resid.elev2)
min(comp$Elev_residuals)
max(comp$Elev_residuals)
min(comp$Pi_residuals)
max(comp$Pi_residuals)
### Now use predict to get the predictions
newdata5 <- cbind(newdata, newdata2, Elev_residuals = seq(-0.7,0.4, length = 2000), Pi_residuals = seq(-0.8, 0.5, length = 2000) )
#m.ssn.elev.pi.pred = predict(m.ssn.elev.pi, newdata = newdata5, se.fit = TRUE)
m.resid.pi2.pred = predict(m.resid.pi2, newdata = newdata5, se.fit = TRUE)
m.resid.elev2.pred = predict(m.resid.elev2, newdata = newdata5, se.fit = TRUE)
forplot5 <- data.frame('Elev_m' = newdata$Elev_m,
'Elev_m2' = newdata$Elev_m2,
'newd2' = newdata2,
'newd_res_elev' = newdata5$Elev_residuals,
'pred.m.resid.pi' = m.resid.pi2.pred,
'newd_res_pi' = newdata5$Pi_residuals,
'pred.m.resid.elev' = m.resid.elev2.pred)
## and plot
ggplot(comp)+
geom_point(data=comp, aes(x=Mean.pi, y=Elev_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit+1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit-1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Nucleotide Diversity", y= "Elevation Residuals", title = "long y title is Residuals of Seq_SSN ~ Elevation + centered(Elevation)^2")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 19.5),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNElevQuadResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
# pi residuals
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Pi_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit+1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit-1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(y= "Nucleotide Diversity Residuals", x= "Elevation (m)", title = "long y title is Residuals of Seq_SSN ~ Mean.pi")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNPiResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
## and plot
comp <- comp[order(comp$Elev_m),]
comp$pop <- as.factor(comp$pop)
comp$pop <- factor(comp$pop, levels = comp$pop[order(comp$Elev_m)])
str(comp$pop)
### this looks like the right order
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
comp$labels <- paste0(comp$pop, " - ", comp$Elev_m, "m")
ggplot(comp)+
geom_point(data=comp, aes(x=Mean.pi, y=Elev_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit+1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Mean.pi, y = pred.m.resid.pi.fit-1.96*pred.m.resid.pi.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(x= "Nucleotide Diversity", y= "Elevation Residuals", title = "long y title is Residuals of Seq_SSN ~ Elevation + centered(Elevation)^2")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 19.5),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNElevQuadResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
# pi residuals
ggplot(comp)+
geom_point(data=comp, aes(x=Elev_m, y=Pi_residuals, shape = as.factor(pop), fill= Elev_m), col = "black", size = 5, stroke = 1.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit), linetype = "solid",
alpha = 0.7, linewidth = 1.25)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit+1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.3, linewidth = 0.75)+
geom_line(dat = forplot5, aes(x = Elev_m, y = pred.m.resid.elev.fit-1.96*pred.m.resid.elev.se.fit), linetype = "solid",
alpha = 0.5, linewidth = 0.75)+
labs(y= "Nucleotide Diversity Residuals", x= "Elevation (m)", title = "long y title is Residuals of Seq_SSN ~ Mean.pi")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = comp$label,
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 20),
legend.text = element_text(color = "black", size = 20),
axis.title = element_text(color = "black", size = 20),
axis.text = element_text(color = "black", size = 20),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/SSNPiResid_topo.png",
height = 7, width = 9, device = "png", dpi = 500)
summary(m.ssn.elev.pi.good)
