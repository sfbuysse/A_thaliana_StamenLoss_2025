myL = 485:969)
# example data
plot(-log10(myQpc$pvals), bty="n", xlab = "PCs", ylab = "-log10(p value)", col = "#1BB6AF", lwd=2, xaxt="n")
abline(h = -log10(0.05/length(myQpc$pvals)), col = "#FF5300", lwd=2)
axis(1, at = c(1:length(myQpc$pvals)))
#estimate the confidence intervals
myVaest = var0(myQpc$cml)
myCI = 1.96*sqrt(myVaest*myEig$values)
#plot
palette(c('white','#999999', '#E69F00', '#56B4E9', "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", 'black', 'mediumpurple3'))
par(mar = c(5,8,5,14), xpd=T)
plot(myEig$vectors[,2], myTraits$FT16_mean[-nrow(myTraits)], bty="n", col = as.factor(myTraits$group), lwd=2, ylab = "", yaxt="n",xlab = "PC2", cex.lab=2, cex.axis=2, xaxt="n")
axis(1, cex.axis=1.5, lwd=2)
axis(2, las=2, cex.axis=1.5, lwd=2)
mtext('Flowering time 16C',side=2, line=5, cex=2)
legend(0.06, 130, levels(as.factor(myTraits$group)), pch=1, pt.lwd = 2,col = palette(), bty="n", text.width = 0.04)
par(xpd=F)
abline(lm(myTraits$FT16_mean[-nrow(myTraits)]~myEig$vectors[,2]), lwd=2, col = "#0072B2")
abline(a=mean(myTraits$FT16_mean), b = myCI[2], lty=2, col='#56B4E9', lwd=2)
abline(a=mean(myTraits$FT16_mean), b = -myCI[2], lty=2, col='#56B4E9', lwd=2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(qqman)
library(ggpubr)
rm(list = ls())
library(ggplot2)
library(dplyr)
library(qqman)
library(ggpubr)
rm(list = ls())
library(ggplot2)
library(dplyr)
library(qqman)
library(ggpubr)
rm(list = ls())
# list of files to read in :
files <- c("NoCent.PlinkFiltering_Binary.c", "NoCent.PlinkFiltering_raw.c",  "NoCent.PlinkFiltering_Asin.c", "NoCent.PlinkFiltering_Elev.c", "allSNPs.PlinkFiltering_Asin.c", "allSNPs.PlinkFiltering_raw.c", "allSNPs.PlinkFiltering_Elev.c", "allSNPs.PlinkFiltering_Binary.c", "allSNPs.PlinkFiltering_raw_subset.c", "NoCent.PlinkFiltering_raw_subset.c","NoCent.PlinkFiltering_raw.c_testing" )
# list of shared SNPs
# I got a little lost with my old code and what I would all need to read in to find the shared SNPs and the whole cent/nc thing. So this is from the excel sheet to check the code, but I do need to still double check that this list is accurate.
highlight_snps <- c("Chr1:14262517",
"Chr3:2239234",
"Chr3:2253161",
"Chr3:2942726",
"Chr5:4899729",
"Chr5:4899733",
"Chr5:4899789",
"Chr5:4899798",
"Chr5:4899803",
"Chr5:4899865",
"Chr5:4900275",
"Chr5:4900560",
"Chr5:4900628",
"Chr5:4919727",
"Chr5:4920179",
"Chr5:4920289",
"Chr5:4920304",
"Chr5:4920731",
"Chr5:10731997",
"Chr5:13458838",
"Chr5:19462189"
)
identifier <- "allSNPs.PlinkFiltering_raw.c"
sig.level <- 0.05
filename = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/", identifier, ".assoc.txt")
fig_name = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/", identifier)
results <- read.delim(file= filename, header = T, stringsAsFactors = F)
# reorganize dataframe
forplot <- data.frame("BP" = results$ps, "CHR" = results$chr, "P" = results$p_wald, "SNP" = results$rs)
forplot$fdr <- p.adjust(p= forplot$P, method = "fdr")
#for point color...
forplot$fdr_col <- forplot$CHR
forplot[forplot$fdr_col == 1, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 2, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 3, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 4, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 5, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr < 0.10, "fdr_col"] <- "#1E88E5"
# allSNPs raw: cutoff for this is between 9.651559e-02 (6) and 1.004850e-01 (1)
forplot[forplot$fdr < 0.05, "fdr_col"] <- "#D66C93"
# allSNPs raw: cutoff for this is between 7.323552e-02 (6) and 4.269675e-03(7)
forplot$fdr_col <- as.factor(forplot$fdr_col)
#make the shared hits a 0 or something??
# add bonferroni correction p value
forplot$bon <- p.adjust(forplot$P, method = "bonferroni")
# add row for outlining shared SNPs
forplot$shared <- as.character(forplot$fdr_col)
forplot[forplot$SNP %in% highlight_snps, "shared"] <- "green"
forplot$shared <- as.factor(forplot$shared)
###### manual plot #####
# prep to plot
don <- forplot %>%
# compute chromosome size in bp
group_by(CHR) %>%
summarize(chr_len=max(BP)) %>%
#calculate cumulative position of each chromosome (again in bp)
mutate(tot=cumsum(chr_len)-chr_len) %>%
dplyr::select(-chr_len) %>%
#add this info to the initial data set (so like adding new column and sorting by it)
left_join(forplot, ., by=c("CHR"="CHR")) %>%
#add cum position of each SNP
arrange(CHR, BP) %>%
mutate( psCum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(psCum) + min(psCum) ) /2 )
#sig.level is set in the function line. is 0.05 default but not expecting hits above that.
bonferroni_sig <- sig.level/length(forplot$P)
# split don into shared SNPs and not shared SNPs
don_a <- don[don$shared == "green", ]
don_b <- don[don$shared != "green", ]
?geom_point()
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don_b, aes(x=psCum, y=-log10(P))) +
geom_point(aes(color = fdr_col), shape = 19, alpha = 0.8, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_fill_manual(values = levels(don$fdr_col)) +
scale_color_manual(values = alpha(levels(don$shared), 0.8))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don_b, aes(x=psCum, y=-log10(P))) +
geom_point(aes(color = fdr_col), shape = 19, alpha = 0.8, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_fill_manual(values = levels(don$fdr_col)) +
scale_color_manual(values = alpha(levels(don$shared), 0.8))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
#geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don_b, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col), shape = 19, alpha = 0.8, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_fill_manual(values = levels(don$fdr_col)) +
#scale_color_manual(values = alpha(levels(don$shared), 0.8))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
#geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don_b, aes(x=psCum, y=-log10(P))) +
geom_point(aes(color = fdr_col), shape = 16, alpha = 0.8, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_color_manual(values = levels(don$fdr_col)) +
#scale_color_manual(values = alpha(levels(don$shared), 0.8))+
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
#geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
levels(don$shared)
alpha(levels(don$shared), 0.8)
as.character(alpha(forplot$fdr_col, 0))
identifier <- "allSNPs.PlinkFiltering_raw.c"
Ps.PlinkFiltering_Elev.c"
#
filename = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/", identifier, ".assoc.txt")
filename = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/", identifier, ".assoc.txt")
fig_name = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/", identifier)
results <- read.delim(file= filename, header = T, stringsAsFactors = F)
# reorganize dataframe
forplot <- data.frame("BP" = results$ps, "CHR" = results$chr, "P" = results$p_wald, "SNP" = results$rs)
forplot$fdr <- p.adjust(p= forplot$P, method = "fdr")
#for point color...
forplot$fdr_col <- forplot$CHR
forplot[forplot$fdr_col == 1, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 2, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 3, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 4, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 5, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr < 0.10, "fdr_col"] <- "#1E88E5"
# allSNPs raw: cutoff for this is between 9.651559e-02 (6) and 1.004850e-01 (1)
forplot[forplot$fdr < 0.05, "fdr_col"] <- "#D66C93"
# allSNPs raw: cutoff for this is between 7.323552e-02 (6) and 4.269675e-03(7)
forplot$fdr_col <- as.factor(forplot$fdr_col)
#make the shared hits a 0 or something??
# add bonferroni correction p value
forplot$bon <- p.adjust(forplot$P, method = "bonferroni")
# add row for outlining shared SNPs
forplot$shared <- as.character(alpha(forplot$fdr_col, 0))
forplot[forplot$SNP %in% highlight_snps, "shared"] <- alpha("green", 0.8)
# list of shared SNPs
# I got a little lost with my old code and what I would all need to read in to find the shared SNPs and the whole cent/nc thing. So this is from the excel sheet to check the code, but I do need to still double check that this list is accurate.
highlight_snps <- c("Chr1:14262517",
"Chr3:2239234",
"Chr3:2253161",
"Chr3:2942726",
"Chr5:4899729",
"Chr5:4899733",
"Chr5:4899789",
"Chr5:4899798",
"Chr5:4899803",
"Chr5:4899865",
"Chr5:4900275",
"Chr5:4900560",
"Chr5:4900628",
"Chr5:4919727",
"Chr5:4920179",
"Chr5:4920289",
"Chr5:4920304",
"Chr5:4920731",
"Chr5:10731997",
"Chr5:13458838",
"Chr5:19462189"
)
forplot[forplot$SNP %in% highlight_snps, "shared"] <- alpha("green", 0.8)
forplot$shared <- as.factor(forplot$shared)
###### manual plot #####
# prep to plot
don <- forplot %>%
# compute chromosome size in bp
group_by(CHR) %>%
summarize(chr_len=max(BP)) %>%
#calculate cumulative position of each chromosome (again in bp)
mutate(tot=cumsum(chr_len)-chr_len) %>%
dplyr::select(-chr_len) %>%
#add this info to the initial data set (so like adding new column and sorting by it)
left_join(forplot, ., by=c("CHR"="CHR")) %>%
#add cum position of each SNP
arrange(CHR, BP) %>%
mutate( psCum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(psCum) + min(psCum) ) /2 )
#sig.level is set in the function line. is 0.05 default but not expecting hits above that.
bonferroni_sig <- sig.level/length(forplot$P)
sig.level <- 0.05
#sig.level is set in the function line. is 0.05 default but not expecting hits above that.
bonferroni_sig <- sig.level/length(forplot$P)
levels(don$shared)
levels(don$fdr_col)
# split don into shared SNPs and not shared SNPs
don_a <- don[don$shared == "#00FF00CC", ]
don_b <- don[don$shared != "#00FF00CC", ]
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don_b, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_fill_manual(values = alpha(levels(don$fdr_col),0.8)) + # slight concern using levels from don might mess something up...
scale_color_manual(values = levels(don$shared))+ # slight concern using levels from don might mess something up...
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
#geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
forplot <- data.frame("BP" = results$ps, "CHR" = results$chr, "P" = results$p_wald, "SNP" = results$rs)
forplot$fdr <- p.adjust(p= forplot$P, method = "fdr")
#for point color...
forplot$fdr_col <- forplot$CHR
forplot[forplot$fdr_col == 1, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 2, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 3, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 4, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 5, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr < 0.10, "fdr_col"] <- "#1E88E5"
# allSNPs raw: cutoff for this is between 9.651559e-02 (6) and 1.004850e-01 (1)
forplot[forplot$fdr < 0.05, "fdr_col"] <- "#D66C93"
# allSNPs raw: cutoff for this is between 7.323552e-02 (6) and 4.269675e-03(7)
forplot$fdr_col <- as.factor(forplot$fdr_col)
#make the shared hits a 0 or something??
# add bonferroni correction p value
forplot$bon <- p.adjust(forplot$P, method = "bonferroni")
# add row for outlining shared SNPs
forplot$shared <- as.character(alpha(forplot$fdr_col, 0))
forplot[forplot$SNP %in% highlight_snps, "shared"] <- alpha("green", 1)
forplot$shared <- as.factor(forplot$shared)
###### manual plot #####
# prep to plot
don <- forplot %>%
# compute chromosome size in bp
group_by(CHR) %>%
summarize(chr_len=max(BP)) %>%
#calculate cumulative position of each chromosome (again in bp)
mutate(tot=cumsum(chr_len)-chr_len) %>%
dplyr::select(-chr_len) %>%
#add this info to the initial data set (so like adding new column and sorting by it)
left_join(forplot, ., by=c("CHR"="CHR")) %>%
#add cum position of each SNP
arrange(CHR, BP) %>%
mutate( psCum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(psCum) + min(psCum) ) /2 )
#sig.level is set in the function line. is 0.05 default but not expecting hits above that.
bonferroni_sig <- sig.level/length(forplot$P)
# split don into shared SNPs and not shared SNPs
don_a <- don[don$shared == "#00FF00CC", ]
don_b <- don[don$shared != "#00FF00CC", ]
levels(don_b$shared)
levels(don$shared)
levels(don_a$shared)
View(forplot)
View(don_b)
View(don_a)
# split don into shared SNPs and not shared SNPs
don_a <- don[don$shared == "#00FF00FF", ]
don_b <- don[don$shared != "#00FF00FF", ]
View(don_a)
View(don_b)
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don_b, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_fill_manual(values = alpha(levels(don_b$fdr_col),0.8)) + # slight concern using levels from don might mess something up...
scale_color_manual(values = levels(don_b$shared))+ # slight concern using levels from don might mess something up...
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
#geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_fill_manual(values = alpha(levels(don$fdr_col),0.8)) + # slight concern using levels from don might mess something up...
scale_color_manual(values = levels(don$shared))+ # slight concern using levels from don might mess something up...
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
#geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
library(ggplot2)
library(dplyr)
library(qqman)
library(ggpubr)
rm(list = ls())
# list of files to read in :
files <- c("NoCent.PlinkFiltering_Binary.c", "NoCent.PlinkFiltering_raw.c",  "NoCent.PlinkFiltering_Asin.c", "NoCent.PlinkFiltering_Elev.c", "allSNPs.PlinkFiltering_Asin.c", "allSNPs.PlinkFiltering_raw.c", "allSNPs.PlinkFiltering_Elev.c", "allSNPs.PlinkFiltering_Binary.c", "allSNPs.PlinkFiltering_raw_subset.c", "NoCent.PlinkFiltering_raw_subset.c","NoCent.PlinkFiltering_raw.c_testing" )
# list of shared SNPs
# I got a little lost with my old code and what I would all need to read in to find the shared SNPs and the whole cent/nc thing. So this is from the excel sheet to check the code, but I do need to still double check that this list is accurate.
highlight_snps <- c("Chr1:14262517",
"Chr3:2239234",
"Chr3:2253161",
"Chr3:2942726",
"Chr5:4899729",
"Chr5:4899733",
"Chr5:4899789",
"Chr5:4899798",
"Chr5:4899803",
"Chr5:4899865",
"Chr5:4900275",
"Chr5:4900560",
"Chr5:4900628",
"Chr5:4919727",
"Chr5:4920179",
"Chr5:4920289",
"Chr5:4920304",
"Chr5:4920731",
"Chr5:10731997",
"Chr5:13458838",
"Chr5:19462189"
)
# for testing
#identifier <- "allSNPs.PlinkFiltering_raw.c"
#identifier <- "allSNPs.PlinkFiltering_Elev.c"
#sig.level <- 0.05
manhattan_highlight <- function(identifier, sig.level = 0.05){
# add fdr.line as an object?
##### Set filenames and read in file #####
filename = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/GemmaOutput_2022/", identifier, ".assoc.txt")
fig_name = paste0("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/", identifier)
results <- read.delim(file= filename, header = T, stringsAsFactors = F)
# reorganize dataframe
forplot <- data.frame("BP" = results$ps, "CHR" = results$chr, "P" = results$p_wald, "SNP" = results$rs)
forplot$fdr <- p.adjust(p= forplot$P, method = "fdr")
#for point color...
forplot$fdr_col <- forplot$CHR
forplot[forplot$fdr_col == 1, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 2, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 3, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr_col == 4, "fdr_col"] <- "#000000"
forplot[forplot$fdr_col == 5, "fdr_col"] <- "#ABABAB"
forplot[forplot$fdr < 0.10, "fdr_col"] <- "#1E88E5"
# allSNPs raw: cutoff for this is between 9.651559e-02 (6) and 1.004850e-01 (1)
forplot[forplot$fdr < 0.05, "fdr_col"] <- "#D66C93"
# allSNPs raw: cutoff for this is between 7.323552e-02 (6) and 4.269675e-03(7)
forplot$fdr_col <- as.factor(forplot$fdr_col)
#make the shared hits a 0 or something??
# add bonferroni correction p value
forplot$bon <- p.adjust(forplot$P, method = "bonferroni")
# add row for outlining shared SNPs
forplot$shared <- as.character(alpha(forplot$fdr_col, 0))
forplot[forplot$SNP %in% highlight_snps, "shared"] <- alpha("green", 1)
forplot$shared <- as.factor(forplot$shared)
###### manual plot #####
# prep to plot
don <- forplot %>%
# compute chromosome size in bp
group_by(CHR) %>%
summarize(chr_len=max(BP)) %>%
#calculate cumulative position of each chromosome (again in bp)
mutate(tot=cumsum(chr_len)-chr_len) %>%
dplyr::select(-chr_len) %>%
#add this info to the initial data set (so like adding new column and sorting by it)
left_join(forplot, ., by=c("CHR"="CHR")) %>%
#add cum position of each SNP
arrange(CHR, BP) %>%
mutate( psCum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(psCum) + min(psCum) ) /2 )
#sig.level is set in the function line. is 0.05 default but not expecting hits above that.
bonferroni_sig <- sig.level/length(forplot$P)
# and plot. should just make the 1 plot.
# split don into shared SNPs and not shared SNPs
#don_a <- don[don$shared == "#00FF00FF", ]
#don_b <- don[don$shared != "#00FF00FF", ]
# 11/21/2023 having issues with this double plotting. the blue ones from don_b are all ending up with green outlines even though they should not be. going back to just plotting with don for now because I think it is a levels issues but I can't put it together right now.
# start plot with don_b becuase that is most of what I'll need
m_plot <- ggplot(don, aes(x=psCum, y=-log10(P))) +
geom_point(aes(fill = fdr_col, color = shared), shape = 21, size = 1.3)+
geom_hline(yintercept = -log10(bonferroni_sig), color = "#FFC107", linetype = "dashed", alpha = 0.6)+
#geom_hline(yintercept = -log10(fdr.line), color = "red", linetype = "dotdash")+
scale_fill_manual(values = alpha(levels(don$fdr_col),0.8)) + # slight concern using levels from don might mess something up...
scale_color_manual(values = levels(don$shared))+ # slight concern using levels from don might mess something up...
scale_x_continuous( label = axisdf$CHR, breaks = axisdf$center ) +
#scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) + # might add this back in later for better comparison
#geom_point(data = don_a, aes(fill=fdr_col, color = shared), shape = 21, alpha=0.8, size=1.3)+
labs(x="Chromosome", y= bquote(-log[10](p)))+
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
## merge manhattan and qq into a single thing??
# this doesn't work as written because the ggplot is a grid object and the qqplot is not a grid object, so issues ensue.
#qqplot <- qqman::qq(forplot$P)
## would need the package that let's me make multi facet figures
## then set 2/3 or 3/4 spaces as mplot, and one as qq, then save the merged file
#final_fig <- ggarrange(m_plot, qqplot, nrow = 1, ncol = 2, widths = c(2,1))
##ggplot(forplot, aes(sample = P)+
##geom_qq()+
##geom_qq_line()+
##  labs(x = "Expected", y = "Observed")+
##  theme_bw()
ggsave(paste0(fig_name,".png"), plot = m_plot, width = 7, height = 3, dpi = 700, units = "in")
print(paste0("Done making plot for: ", identifier))
}
# going with this for now (11/3/2023) but I do think I could plot the shared ones as a second layer and then they would all be on the top rather than covered by some other points.
# there might also be a slighly overlap between color and fill that is creating a dark outline because both are at least somewhat transparent. Maybe I need to decrease size so it isn't 1.3?
##### Raw Phenotypes #####
manhattan_highlight(identifier = "allSNPs.PlinkFiltering_raw.c")
manhattan_highlight(identifier = "NoCent.PlinkFiltering_raw.c")
##### Subset Raw Phenotypes #####
# only include if less than 2 as mean short stamen number
manhattan_highlight(identifier = "allSNPs.PlinkFiltering_raw_subset.c")
manhattan_highlight(identifier = "NoCent.PlinkFiltering_raw_subset.c")
##### Asin Phenotypes #####
manhattan_highlight(identifier = "allSNPs.PlinkFiltering_Asin.c")
manhattan_highlight(identifier = "NoCent.PlinkFiltering_Asin.c")
##### Binary Phenotypes #####
manhattan_highlight(identifier = "allSNPs.PlinkFiltering_Binary.c")
manhattan_highlight(identifier = "NoCent.PlinkFiltering_Binary.c")
##### Elevation! #####
manhattan_highlight(identifier = "allSNPs.PlinkFiltering_Elev.c")
manhattan_highlight(identifier = "NoCent.PlinkFiltering_Elev.c")
