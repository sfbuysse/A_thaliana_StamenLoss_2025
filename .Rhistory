op <- par(mar = c(2.5,2,0.1,0.1) + 0.01)
qq(forplot$P, cex.lab = 1, cex.axis = 1, cex = 0.2, mgp = c(1.3, 0.3, 0), tcl = -0.2  ) #las = 1
dev.off()
par(op)
knitr::opts_chunk$set(echo = TRUE)
# later want to add keep_md: TRUE under toc_float
# load packages
suppressPackageStartupMessages(library(car))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lme4))
suppressPackageStartupMessages(library(lmerTest))
suppressPackageStartupMessages(library(ggpubr))
suppressPackageStartupMessages(library(pheatmap))
# prep for doing statistical analyses
options(contrasts = c("contr.sum", "contr.poly"))
# for phenotypic analysis
individuals <- read.csv("data/NativeLines.csv")
# remove extra variables that I don't need - extra random variables or not measured for everything
individuals$LNPV_under <- NULL # only like 5
individuals$LNPV_total <- NULL  # essentially a duplicate of ros
individuals$Ros_Repro <- NULL # inverse of variable I kept
individuals$AG_BG <- NULL
individuals$DaysToEmergence <- NULL # no dif by treatment, don't think is interesting because not in field
#not needed random variables
individuals$SL_InFridge <- NULL
individuals$SL_InOven <- NULL
individuals$IJ_MeasuredBy <- NULL
individuals$RosInOven <- NULL
individuals$ReproInOven <- NULL
individuals$RosWeigher <- NULL
individuals$ReproWeigher <- NULL
individuals$Washed_by <- NULL
individuals$AG_OvenTime <- NULL
individuals$BG_OvenTime <- NULL
individuals$DaysOOC <- NULL
individuals$HarvestedBy <- NULL
individuals$BoltToRH <- NULL
# keep only 1 fitness component?
# discard parts of ratios?
# do that before or after looking for trait correlations? I think I want to do trait correlations first - everything at this point is 28 traits
# all at NA now, these are the plants to keep at NA
# harvested for below ground biomass: 112-10-C, 112-10-F, 112-11-F, 112-14-C, 947-6-F, 947-8-C, 947-11-C, 947-12-F
# never emerged: 112-6-F, 951-1-C, 951-1-F, 951-2-C, 951-2-F
# emerged then died -> change tot fruits to zero
individuals[individuals$PotLabel %in% c("102-1-F", "105-2-C", "107-2-F", "114-2-F"), "TotFruits"] <- 0
it.cur <- individuals[(individuals$Genotype < 150 & individuals$Treatment == "Current"), ]
it.fut <- individuals[(individuals$Genotype < 150 & individuals$Treatment == "Future"), ]
sw.cur <- individuals[(individuals$Genotype > 900 & individuals$Treatment == "Current"), ]
sw.fut <- individuals[(individuals$Genotype > 900 & individuals$Treatment == "Future"), ]
# for genotypic analysis
load("data/NativeLinesMeans.robj")
# what I want to do is create a dataframe where each row is a genotype and each column is a trait using just the mean, not the confidence intervals here b/c I don't know how.
# so to start my dataframe
genotypes <- NativeLinesMeans[["DaysToEmergence"]][c("Treatment", "Genotype", "Mean")]
colnames(genotypes) <- c("Treatment", "Genotype", "DaysToEmergence")
# now add columns to it
# for each item in NativeLines Means starting with item 2
for (i in 2:length(NativeLinesMeans)){
#tmp subset dataframe with first three columns
tmp <- NativeLinesMeans[[i]][c("Treatment", "Genotype", "Mean")]
# rename the mean column
colnames(tmp) <- c("Treatment", "Genotype", names(NativeLinesMeans)[i])
#merge with genotypes
genotypes <- merge(genotypes, tmp, by = c("Treatment", "Genotype"), all = TRUE)
}
# remove traits I also removed from the phenotyic analysis
# remove extra variables that I don't need - extra random variables or not measured for everything
#genotypes$AG_BG <- NULL - don't have yet b/c data in GS4
genotypes$DaysToEmergence <- NULL # no dif by treatment, don't think is interesting because not in field
# make the important genotypic column names match the phenotypic ones
genotypes <- genotypes %>%
rename(LN_prevern = LNPV_ros, Repro_Ros = ReproToRos,TotFruits = TotFruit )
g.it.cur <- genotypes[(as.numeric(as.character(genotypes$Genotype)) < 150 & genotypes$Treatment == "Current"), ]
g.it.fut <- genotypes[(as.numeric(as.character(genotypes$Genotype)) < 150 & genotypes$Treatment == "Future"), ]
g.sw.cur <- genotypes[(as.numeric(as.character(genotypes$Genotype)) > 900 & genotypes$Treatment == "Current"), ]
g.sw.fut <- genotypes[(as.numeric(as.character(genotypes$Genotype)) > 900 & genotypes$Treatment == "Future"), ]
# ignore first 6 rows because are identifying variables
myCors <- cor(individuals[,7:34 ], use = "pairwise.complete.obs", method = "pearson")
pheatmap(mat = myCors, cluster_rows = FALSE, cluster_cols = FALSE)
# removing fitness components: TotFruits, NumFlwrOpen, RosMass, ReproMass, height, LatBranch, PrimStalks, NumRos, AG_mass, BG_mass
myTraits <- c("EmergeToBolt", "BoltToFlower", "EmergeToFlwr", "LN_prevern", "bolt_LN_ros", "bolt_LN_under", "bolt_LN_total", "SL_fresh",      "SL_hyd",        "SL_dried",      "Area",          "RWC",           "LDMC","SLA",  "Root_to_Shoot",    "Repro_Ros" )
pheatmap(mat = cor(individuals[,myTraits ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
# removing traits due to correlations: EmergeToBolt and BoltToFlower because EmergeToFlwr is the one more commonly used in the literature, bolt LN under and total because total and ros are correlated, SL fresh, hyd, dried, and area b/c all correlated with each other and taken into account in calculated traits
# under and root_to_shoot are correlated. what might be up there?? super subset of plants so not sure until I have GS4 data if that holds
myTraits2 <- c("EmergeToFlwr", "LN_prevern", "bolt_LN_ros","RWC","LDMC","SLA","Root_to_Shoot","Repro_Ros" )
pheatmap(mat = cor(individuals[,myTraits2 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
# could cut LDMC b/c strong negative correlation with SLA
cor(individuals[,c(myTraits2, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
par(mfrow = c(2,2))
pheatmap(mat = cor(it.cur[,7:34 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(it.fut[,7:34 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(sw.cur[,7:34 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(sw.fut[,7:34 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
par(mfrow = c(2,2))
pheatmap(mat = cor(it.cur[,myTraits ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(it.fut[,myTraits ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(sw.cur[,myTraits ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(sw.fut[,myTraits ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
par(mfrow = c(2,2))
pheatmap(mat = cor(it.cur[,myTraits2 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(it.fut[,myTraits2 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(sw.cur[,myTraits2 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(sw.fut[,myTraits2 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
cor(it.cur[,c(myTraits2, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
cor(it.fut[,c(myTraits2, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
cor(sw.cur[,c(myTraits2, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
cor(sw.fut[,c(myTraits2, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
# ignore first 2 rows because are identifying variables
myCors2 <- cor(genotypes[,3:24 ], use = "pairwise.complete.obs", method = "pearson")
pheatmap(mat = myCors2, cluster_rows = FALSE, cluster_cols = FALSE)
# removing fitness components: TotFruits, RosWt, ReproWt, height, LatBranch, PrimStalks, NumRos
myTraits3 <- c("EmergeToBolt", "BoltToFlwr", "EmergeToFlwr", "LN_prevern", "bolt_LN_ros", "bolt_LN_under", "bolt_LN_total", "SL_fresh", "SL_hyd", "SL_dry", "SL_area",   "RWC", "LDMC","SLA","Repro_Ros" ) # need to add Root_to_shoot after GS4
pheatmap(mat = cor(genotypes[,myTraits3 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
# removing traits due to correlations: EmergeToBolt and BoltToFlwr because EmergeToFlwr is the one more commonly used in the literature, bolt LN under and total because total and ros are correlated, SL fresh, hyd, dried, and area b/c all correlated with each other and taken into account in calculated traits
# under and root_to_shoot are correlated. what might be up there?? super subset of plants so not sure until I have GS4 data if that holds
myTraits4 <- c("EmergeToFlwr", "LN_prevern", "bolt_LN_ros","RWC","LDMC","SLA","Repro_Ros" ) # need to add Root_to_shoot after GS4
pheatmap(mat = cor(genotypes[,myTraits4 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
# could cut LDMC b/c strong negative correlation with SLA
cor(genotypes[,c(myTraits4, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
par(mfrow = c(2,2))
pheatmap(mat = cor(g.it.cur[,3:24 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.it.fut[,3:24 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.sw.cur[,3:24 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.sw.fut[,3:24 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
par(mfrow = c(2,2))
pheatmap(mat = cor(g.it.cur[,myTraits3 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.it.fut[,myTraits3 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.sw.cur[,myTraits3 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.sw.fut[,myTraits3 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
par(mfrow = c(2,2))
pheatmap(mat = cor(g.it.cur[,myTraits4 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.it.fut[,myTraits4 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.sw.cur[,myTraits4 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(mat = cor(g.sw.fut[,myTraits4 ], use = "pairwise.complete.obs", method = "pearson"), cluster_rows = FALSE, cluster_cols = FALSE)
cor(g.it.cur[,c(myTraits4, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
cor(g.it.fut[,c(myTraits4, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
cor(g.sw.cur[,c(myTraits4, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
cor(g.sw.fut[,c(myTraits4, "TotFruits") ], use = "pairwise.complete.obs", method = "pearson")
sgTraits <- c("GS", "PotLabel", "Genotype", "Treatment", "Flat", "Position", "EmergeToFlwr", "LN_prevern", "bolt_LN_ros","RWC","SLA","Repro_Ros", "TotFruits" )
g.sgTraits <- c("Genotype", "Treatment", "EmergeToFlwr", "LN_prevern", "bolt_LN_ros","RWC","SLA","Repro_Ros", "TotFruits" )
# subset
it.cur2 <- it.cur[ , sgTraits]
g.it.cur2 <- g.it.cur[ ,g.sgTraits]
# calculate relative fitness
it.cur2$rel.fit <- it.cur2$TotFruits / max(it.cur2$TotFruits, na.rm = TRUE)
g.it.cur2$rel.fit <- g.it.cur2$TotFruits / max(g.it.cur2$TotFruits, na.rm = TRUE)
# center and standardize
it.cur2 <- it.cur2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
g.it.cur2 <- g.it.cur2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
# subset
sw.cur2 <- sw.cur[ , sgTraits]
g.sw.cur2 <- g.sw.cur[ ,g.sgTraits]
# calculate relative fitness
sw.cur2$rel.fit <- sw.cur2$TotFruits / max(sw.cur2$TotFruits, na.rm = TRUE)
g.sw.cur2$rel.fit <- g.sw.cur2$TotFruits / max(g.sw.cur2$TotFruits, na.rm = TRUE)
# center and standardize
sw.cur2 <- sw.cur2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
g.sw.cur2 <- g.sw.cur2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
# subset
it.fut2 <- it.fut[ , sgTraits]
g.it.fut2 <- g.it.fut[ , g.sgTraits]
# calculate relative fitness
it.fut2$rel.fit <- it.fut2$TotFruits / max(it.fut2$TotFruits, na.rm = TRUE)
g.it.fut2$rel.fit <- g.it.fut2$TotFruits / max(g.it.fut2$TotFruits, na.rm = TRUE)
# center and standardize
it.fut2 <- it.fut2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
g.it.fut2 <- g.it.fut2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
# subset
sw.fut2 <- sw.fut[ , sgTraits]
g.sw.fut2 <- g.sw.fut[ , g.sgTraits]
# calculate relative fitness
sw.fut2$rel.fit <- sw.fut2$TotFruits / max(sw.fut2$TotFruits, na.rm = TRUE)
g.sw.fut2$rel.fit <- g.sw.fut2$TotFruits / max(g.sw.fut2$TotFruits, na.rm = TRUE)
# center and standardize
sw.fut2 <- sw.fut2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
g.sw.fut2 <- g.sw.fut2 %>%
mutate(
EmergeToFlwr = scale(EmergeToFlwr, center = TRUE, scale = TRUE),
LN_prevern = scale(LN_prevern, center = TRUE, scale = TRUE),
bolt_LN_ros = scale(bolt_LN_ros, center = TRUE, scale = TRUE),
RWC = scale(RWC, center = TRUE, scale = TRUE),
SLA = scale(SLA, center = TRUE, scale = TRUE),
Repro_Ros = scale(Repro_Ros, center = TRUE, scale = TRUE)
)
# phenotypic
sg.it.cur <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = it.cur2)
summary(sg.it.cur)
vif(sg.it.cur)
# genotypic
g.sg.it.cur <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.it.cur2)
summary(g.sg.it.cur)
vif(g.sg.it.cur)
#phenotypic
sg.sw.cur <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2)
summary(sg.sw.cur)
vif(sg.sw.cur)
#genotypic
g.sg.sw.cur <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)
summary(g.sg.sw.cur)
vif(g.sg.sw.cur)
#phenotypic
sg.it.fut <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = it.fut2)
summary(sg.it.fut)
vif(sg.it.fut)
#genotypic
g.sg.it.fut <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.it.fut2)
summary(g.sg.it.fut)
vif(g.sg.it.fut)
#phenotypic
sg.sw.fut <- lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2)
summary(sg.sw.fut)
vif(sg.sw.fut)
# quick check order of terms is not important
summary(lmer(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + EmergeToFlwr + SLA + Repro_Ros + (1|GS), data = sw.fut2))
#genotypic
g.sg.sw.fut <- lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)
summary(g.sg.sw.fut)
vif(g.sg.sw.fut)
# quick check order of terms is not important
summary(lm(rel.fit ~ bolt_LN_ros + RWC + SLA + EmergeToFlwr + LN_prevern + Repro_Ros, data = g.sw.fut2))
# genotypic full model: lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)
# I don't need to save the intermediate models, just the residuals. I am going to name these as no_trait where trait is the predictor that I removed from the model
# genotypic: with current sorting all the NA's are for 951 which is the last row so add this as a row to the data frame
g.sw.fut2$no_EmergeToFlwr <- c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_LN_prevern <- c(resid(lm(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_bolt_LN_ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_RWC <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_SLA <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros, data = g.sw.fut2)), NA)
g.sw.fut2$no_Repro_Ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA, data = g.sw.fut2)), NA)
# phenotypic full model:lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2)
# only keep complete cases to remove NA
sw.fut2 <- sw.fut2[complete.cases(sw.fut2), ]
sw.fut2$no_EmergeToFlwr <- resid(lmer(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_LN_prevern <- resid(lmer(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_bolt_LN_ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_RWC <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_SLA <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros + (1|GS), data = sw.fut2))
sw.fut2$no_Repro_Ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + (1|GS), data = sw.fut2))
# Emergence to Flowering
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# Leaf Number Pre-vernalization
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# Leaf Number at Bolting
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# relative water content
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# specific leaf area
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# ratio of reproductive biomass to rosette biomass
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.fut2)+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# genotypic full model: lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)
# I don't need to save the intermediate models, just the residuals. I am going to name these as no_trait where trait is the predictor that I removed from the model
# with current sorting all the NA's are for 951 which is the last row so add this as a row to the data frame
g.sw.cur2$no_EmergeToFlwr <- c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_LN_prevern <- c(resid(lm(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_bolt_LN_ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_RWC <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_SLA <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros, data = g.sw.cur2)), NA)
g.sw.cur2$no_Repro_Ros <- c(resid(lm(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA, data = g.sw.cur2)), NA)
# phenotypic full model:lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2)
# only keep complete cases to remove NA
sw.cur2 <- sw.cur2[complete.cases(sw.cur2), ]
sw.cur2$no_EmergeToFlwr <- resid(lmer(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_LN_prevern <- resid(lmer(rel.fit ~ EmergeToFlwr + bolt_LN_ros + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_bolt_LN_ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + RWC + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_RWC <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + SLA + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_SLA <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + Repro_Ros + (1|GS), data = sw.cur2))
sw.cur2$no_Repro_Ros <- resid(lmer(rel.fit ~ EmergeToFlwr + LN_prevern + bolt_LN_ros + RWC + SLA + (1|GS), data = sw.cur2))
#Emergence to Flowering
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# LN prevern
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = LN_prevern, y = no_LN_prevern))+
geom_smooth(aes(x = LN_prevern, y = no_LN_prevern), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
#LN bolting
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = bolt_LN_ros, y = no_bolt_LN_ros))+
geom_smooth(aes(x = bolt_LN_ros, y = no_bolt_LN_ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# RWC
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = RWC, y = no_RWC))+
geom_smooth(aes(x = RWC, y = no_RWC), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# SLA
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = SLA, y = no_SLA))+
geom_smooth(aes(x = SLA, y = no_SLA), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
# Repro: Ros
ggplot(data = g.sw.cur2[1:30, ])+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
ggplot(data = sw.cur2)+
geom_point(aes(x = Repro_Ros, y = no_Repro_Ros))+
geom_smooth(aes(x = Repro_Ros, y = no_Repro_Ros), method = 'lm', formula = y ~ x)+
labs(title = "Phenotypic")+
theme_classic()
summary(sg.sw.fut)
summary(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2))
# remove EmergeToFlwr
summary(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2))
View(g.sg.sw.fut)
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)) ~ EmergeToFlwr, data = g.sw.fut2)
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)) ~ EmergeToFlwr, data = g.sw.fut2))
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ EmergeToFlwr, data = g.sw.fut2))
# now try Jimmy's thing of taking residuals in the predictor too
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA), data = g.sw.fut2))
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA), data = g.sw.fut2))
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ EmergeToFlwr, data = g.sw.fut2))
# full model
summary(g.sg.sw.fut)
# remove EmergeToFlwr
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ EmergeToFlwr, data = g.sw.fut2))
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = EmergeToFlwr, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
# now try Jimmy's thing of taking residuals in the predictor too
summary(lm(c(resid(lm(rel.fit ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA) ~ c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA), data = g.sw.fut2))
g.sw.fut2$EmergeToFlwr_JimmyResid <- c(resid(lm(EmergeToFlwr ~ LN_prevern + bolt_LN_ros + RWC + SLA + Repro_Ros, data = g.sw.fut2)), NA)
ggplot(data = g.sw.fut2[1:30, ])+
geom_point(aes(x = EmergeToFlwr_JimmyResid, y = no_EmergeToFlwr))+
geom_smooth(aes(x = EmergeToFlwr_JimmyResid, y = no_EmergeToFlwr), method = 'lm', formula = y ~ x)+
labs(title = "Genotypic")+
theme_classic()
load("~/R_script/PopGlobalPi_allsite_04082022.ROBJ")
load("C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/PopGlobalPi_allsite_04082022.ROBJ")
# adding this on later date. what about quadratic elevation predicting pi?
comp$Elev_c2 <- (comp$Elev_m - mean(comp$Elev_m))^2
m.pi.elev2 <- lm(Mean.pi ~ Elev_m + Elev_c2, data = comp)
### r = -0.2323357 p = 0.3865
m.pi.ssn <- lm(Seq_PopFlwrMean ~ Mean.pi, dat = comp)
########## more complex model! ##########
### with cent ###
# this was done 10/26 with the cent included files and a centered quadratic model to reduce collinearity.
m.ssn.elev.pi.good <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2 + Mean.pi, dat = comp)
# need to do a sequenced lines by elevation model to get the residuals from it.
tmp4_seq <- lm(Seq_PopFlwrMean ~ Elev_m + Elev_c2, data = comp)
comp$Elev_residuals <- residuals(tmp4_seq) # index order matches row name order.
plot(resid(lm(Mean.pi ~ Elev_m + Elev_c2, data = comp)), comp$Elev_residuals)
# add Jimmy's thing in a quick plot
plot(y=comp$Pi_residuals, x = resid(lm(Elev_m ~ Mean.pi, data = comp)))
View(comp)
# then I want the inverse. so the residuals of ssn ~ mean.pi regressed with elevation
# making new model b/c need order to match comp row order and I think it will but why not just do it again
tmp.resid2 <- residuals(lm(Seq_PopFlwrMean ~ Mean.pi, data = comp))
tmp.resid2
plot(tmp.resid2)
# look pretty random
comp$Pi_residuals <- tmp.resid2
# add Jimmy's thing in a quick plot
plot(y=comp$Pi_residuals, x = resid(lm(Elev_m ~ Mean.pi, data = comp)))
