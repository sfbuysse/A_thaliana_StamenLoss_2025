geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = -3),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = -.3),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = -.03),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = -.03),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = -.1),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = -.5),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = 0.5),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.009, height = 0.09, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = 0.8),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.007, height = 0.1, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = 0.85),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.007, height = 0.1, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = 0.85),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 12),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.007, height = 0.1, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = 0.85),
axis.title.x = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 9),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
# let's also add elevation for plotting later on - just add this to stamenTrait
load(file = "C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/R_script/StamenLossPipeline/Elev_Means_Feb2022.ROBJ")
# don't need the pop mean columns.
Elev_Means <- Elev_Means[ , c('Population', 'Elev_m')]
# make Pop column to merge by
stamenTrait$Population <- substr(stamenTrait$LineID, 1, 3)
# change ARB to ARU
stamenTrait[stamenTrait$Population == "ARB", "Population"] <- "ARU"
# change SPE to SAL
stamenTrait[stamenTrait$Population == "SPE", "Population"] <- "SAL"
# dataframe with x and y vars while still int he same order
forplot <- data.frame("eig_vec1" = stamenEig$vectors[,1], stamenTrait[-nrow(stamenTrait), ])
# join together, need to remove the last row cause Emily does in her plot
forplot <- merge(forplot, Elev_Means, by = "Population")
# prep the dataframe now
# order
forplot <- forplot[order(forplot$Elev_m),]
forplot$Population <- factor(forplot$Population, levels = unique(forplot$Population[order(forplot$Elev_m)]))
str(forplot$Population)
### key is that you need to order the whole sheet AND reorder the factor. BOTH, not just one.
forplot$labels <- paste0(forplot$Population, " - ", forplot$Elev_m, "m")
forplot$posCI <- sapply(forplot$eig_vec1, FUN = function(x){stamenCI[1]*x + mean(stamenTrait$Pheno)})
forplot$negCI <- sapply(forplot$eig_vec1, FUN = function(x){-stamenCI[1]*x + mean(stamenTrait$Pheno)})
# model to draw line from.
m2 <- lm(forplot$Pheno~ forplot$eig_vec1)
# set.seed cause jitter is random
set.seed(220)
ggplot(forplot)+
geom_ribbon(aes(eig_vec1, ymin = posCI, ymax = negCI), alpha = 0.25)+
#geom_line(aes(x=eig_vec1, y=posCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
#geom_line(aes(x=eig_vec1, y=negCI), linetype = "solid",
#          alpha = 0.3, linewidth = 0.75)+
geom_abline(intercept = m2$coefficients[1], slope = m2$coefficients[2], linetype = "solid", alpha = 0.8, linewidth = 0.75)+
geom_jitter(aes(x = eig_vec1 , y = Pheno, shape = as.factor(Population), fill = Elev_m), width = 0.007, height = 0.1, col = "black", size = 1.3, stroke = 0.5, show.legend = FALSE)+
labs(x = "PC1 (11.2%)", y = "Mean Short Stamen Number")+
scale_fill_gradientn(name = "Elevation", colours = topo.colors(16))+
scale_shape_manual(name = "Population",
labels = unique(forplot$label),
values = c(rep(c(22, 21, 24, 23, 25), times = 4)))+
theme_classic()+
theme(
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 10, hjust = 0.85),
axis.title.x = element_text(color = "black", size = 10),
axis.text = element_text(color = "black", size = 9),
legend.spacing.y = unit(0.03, "cm"))
ggsave(filename ="C:/Users/Sophie/Michigan State University/Conner, Jeffrey - SophieAnalyses/Figures/ManuscriptFigs/Qpc_1_topo.png",
height = 2, width = 2, device = "png", dpi = 700)
