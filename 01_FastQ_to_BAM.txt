##### start of the Pipeline #####
## The input is the fastq files from the sequencer ##
## the goal is to concatenate files together, trim the adapter sequences, and align with BWA 

## modules are loaded within each step. if running multiple steps at once, load all modules at the beginning.

##### Step 1: concatenate fastq files so each sample has 1 forward and 1 reverse read #####
# SeqID.txt contains the unique identifier at the beginning of each file name, one to a line

# start by combining 001 to 00X for each lane independently
# run these lines in the directory with the files
while IFS= read -r line; do for x in 1 2; do cat "$line"_L00"$x"_R1_00*.fastq > "$line"_L00"$x"_R1_comb.fastq; done; done < SeqID.txt
while IFS= read -r line; do for x in 1 2; do cat "$line"_L00"$x"_R2_00*.fastq > "$line"_L00"$x"_R2_comb.fastq; done; done < SeqID.txt
# now join the L001 and L002 together
while IFS= read -r line; do cat "$line"_L001_R1_comb.fastq "$line"_L002_R1_comb.fastq > "$line"_R1_comb.fastq; done < SeqID.txt
while IFS= read -r line; do cat "$line"_L001_R2_comb.fastq "$line"_L002_R2_comb.fastq > "$line"_R2_comb.fastq; done < SeqID.txt
# and remove the intermediate files for space
rm *_L00*_R*_comb.fastq
# bgzip everyting for space
for f in *.fastq; do bgzip "$f";done

##### Step 2: Run FastQC to check sample quality #####
module load GCC/7.3.0-2.30  OpenMPI/3.1.1
module load FastQC
module load MultiQC/1.7-Python-3.6.6
# https://multiqc.info/docs/#running-multiqc
# choosing to just do it on the forward reads at this point
while IFS= read -r line; do fastqc "$line"_R1_comb.fastq & done < SeqID.txt
#generate a single report form all the reports in the current directory
multiqc . 

##### Step 3: Trim Adapter Sequences with TrimGalore#####
# https://github.com/FelixKrueger/TrimGalore/blob/master/Docs/Trim_Galore_User_Guide.md
# will trim and run fastq. The --quality flag is just the default level
module load GCC/7.3.0-2.30  OpenMPI/3.1.1 TrimGalore/0.6.5
module load MultiQC/1.7-Python-3.6.6
while IFS= read -r line; do trim_galore \
--cores 4 \
--nextera \
--paired \
--clip_R1 15 \
--clip_R2 15 \
--quality 20 \
--fastqc \
-o /folder/location/TG_trimmed "$line"_R1_comb.fastq.gz "$line"_R2_comb.fastq.gz; done < SeqID.txt 
multiqc .

##### Step 4: Align to Reference Genome #####
# this step can take a long time.
module purge
module load GCC/7.3.0-2.30  OpenMPI/3.1.1
module load SAMtools
module load BWA
module load GATK/4.1.4.1-Python-3.6.6

# indx the reference
bwa index Athal.fasta Athal
cd /folder/location/TG_trimmed

# bwa mem with 4 cores
while IFS= read -r line; do bwa mem -t 4 -M Athal.fasta \
"$line"_R1_comb_val_1.fq.gz  "$line"_R2_comb_val_2.fq.gz \
| samtools view - -bS -o /folder/location/BWA_bam/"$line"_bwa.bam; done < SeqID.txt

# sort, index, get output metrics
cd /folder/location/BWA_bam

while IFS= read -r line; do
samtools sort "$line"_bwa.bam -o sorted_"$line"_bwa.bam
samtools index sorted_"$line"_bwa.bam
samtools view sorted_"$line"_bwa.bam | less -S
samtools flagstat sorted_"$line"_bwa.bam > "$line"_alignment_metrics.txt; done < SeqID.txt

## End of FastQ to Bam. Next step is to Call Variants ##
